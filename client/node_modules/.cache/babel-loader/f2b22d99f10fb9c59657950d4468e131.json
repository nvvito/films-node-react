{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/components/search.js\";\nimport React from 'react';\nimport { Icon, AutoComplete, Input, message } from 'antd';\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { openFilm } from '../store/action';\nconst Option = AutoComplete.Option;\n\nclass Search extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getItemsAsync = searchValue => {\n      if (searchValue) {\n        fetch(\"/api/search\", {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: searchValue\n          })\n        }).then(response => response.json()).then(result => {\n          if (!result.error) this.setState({\n            value: searchValue,\n            result: this.renderResult(result.message)\n          });else if (result.message === 'Token is not valid' || result.message === 'Auth bearer error' || result.message === 'Auth token is not supplied') {\n            this.props.logout();\n            console.log(result);\n            message.error('Auth Error!');\n          } else {\n            console.log(result);\n            message.error('Search Error!');\n          }\n        }).catch(err => {\n          console.log(err);\n          message.error('Search Error!');\n        });\n      } else this.setState({\n        value: '',\n        result: []\n      });\n    };\n\n    this.renderResult = data => {\n      return data.map(el => React.createElement(Option, {\n        key: el._id,\n        value: el._id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Link, {\n        className: \"search-item\",\n        to: \"/\".concat(el._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-item-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, \"Name: \"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, el.name)), React.createElement(\"div\", {\n        className: \"search-item-age\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Release: \"), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, el.release)))));\n    };\n\n    this.openWorker = _id => {\n      this.setState({\n        data: [],\n        result: [],\n        value: ''\n      });\n    };\n\n    this.state = {\n      result: [],\n      value: ''\n    };\n    this.getItemsAsync = this.getItemsAsync.bind(this);\n    this.renderResult = this.renderResult.bind(this);\n    this.openWorker = this.openWorker.bind(this);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(AutoComplete, {\n      dropdownMatchSelectWidth: false,\n      dropdownStyle: {\n        width: 100\n      },\n      placeholder: \"Search...\",\n      optionLabelProp: \"value\",\n      onSearch: this.getItemsAsync,\n      dataSource: this.state.result,\n      onSelect: this.props.openFilm,\n      value: this.state.value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Input, {\n      suffix: React.createElement(Icon, {\n        type: \"search\",\n        className: \"certain-category-icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  token: state.token\n});\n\nconst mapDispatchToProps = dispatch => ({\n  openFilm: bindActionCreators(openFilm, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/components/search.js"],"names":["React","Icon","AutoComplete","Input","message","Link","connect","bindActionCreators","openFilm","Option","Search","Component","constructor","props","getItemsAsync","searchValue","fetch","method","headers","body","JSON","stringify","query","then","response","json","result","error","setState","value","renderResult","logout","console","log","catch","err","data","map","el","_id","name","release","openWorker","state","bind","render","width","mapStateToProps","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Icon, AutoComplete, Input, message } from 'antd'\nimport { Link } from \"react-router-dom\"\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport { openFilm } from '../store/action'\n\nconst { Option } = AutoComplete\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            result: [],\n            value: ''\n        }\n        this.getItemsAsync = this.getItemsAsync.bind(this)\n        this.renderResult = this.renderResult.bind(this)\n        this.openWorker = this.openWorker.bind(this)\n    }\n    getItemsAsync = searchValue => {\n        if (searchValue) {\n            fetch(`/api/search`, {\n                method: 'POST',\n                headers: {\n                    'content-type': 'application/json',\n                },\n                body: JSON.stringify({ query: searchValue })\n            })\n                .then(response => response.json())\n                .then(result => {\n                    if (!result.error) this.setState({ value: searchValue, result: this.renderResult(result.message) })\n                    else if (result.message === 'Token is not valid' || result.message === 'Auth bearer error' || result.message === 'Auth token is not supplied') {\n                        this.props.logout()\n                        console.log(result)\n                        message.error('Auth Error!')\n                    } else {\n                        console.log(result)\n                        message.error('Search Error!')\n                    }\n                })\n                .catch(err => {\n                    console.log(err)\n                    message.error('Search Error!')\n                })\n        } else this.setState({ value: '', result: [] })\n    }\n    renderResult = data => {\n        return (\n            data.map(el =>\n                <Option key={el._id} value={el._id}>\n                    <Link className=\"search-item\" to={`/${el._id}`}>\n                        <div className=\"search-item-name\">\n                            <span>{`Name: `}</span>\n                            <span>{el.name}</span>\n                        </div>\n                        <div className=\"search-item-age\">\n                            <span>{`Release: `}</span>\n                            <span>{el.release}</span>\n                        </div>\n                    </Link>\n                </Option>\n            )\n        )\n    }\n    openWorker = _id => {\n        this.setState({ data: [], result: [], value: '' })\n    }\n    render() {\n        return (\n            <div>\n                <AutoComplete\n                    dropdownMatchSelectWidth={false}\n                    dropdownStyle={{ width: 100 }}\n                    placeholder=\"Search...\"\n                    optionLabelProp=\"value\"\n                    onSearch={this.getItemsAsync}\n                    dataSource={this.state.result}\n                    onSelect={this.props.openFilm}\n                    value={this.state.value}\n                >\n                    <Input suffix={<Icon type=\"search\" className=\"certain-category-icon\" />} />\n                </AutoComplete>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    token: state.token\n})\nconst mapDispatchToProps = dispatch => ({\n    openFilm: bindActionCreators(openFilm, dispatch),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Search)"]},"metadata":{},"sourceType":"module"}