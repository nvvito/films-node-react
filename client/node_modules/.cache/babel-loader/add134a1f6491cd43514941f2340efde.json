{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/pages/add.js\";\nimport React from 'react';\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, saveFilm } from '../store/action'; //component\n\nimport WorkersBreadcrumb from '../components/breadcrumb';\nimport EditableTagGroup from '../components/tagGroup';\nconst Option = Select.Option;\nlet breadcrumbs = [{\n  path: '/',\n  breadcrumbName: 'Films'\n}, {\n  path: '/add/',\n  breadcrumbName: 'Add'\n}];\n\nclass Task extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    let _this$props = this.props,\n        load = _this$props.load,\n        data = _this$props.data;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(WorkersBreadcrumb, {\n      breadcrumbs: breadcrumbs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }), load ? React.createElement(LoadCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }) : React.createElement(RenderCard, {\n      data: data,\n      filmChangeName: this.props.filmChangeName,\n      filmChangeDate: this.props.filmChangeDate,\n      filmChangeFormat: this.props.filmChangeFormat,\n      filmAddTag: this.props.filmAddTag,\n      filmDeleteTag: this.props.filmDeleteTag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  load: state.film.load,\n  data: state.film.data\n});\n\nconst mapDispatchToProps = dispatch => ({\n  filmChangeName: bindActionCreators(filmChangeName, dispatch),\n  filmChangeDate: bindActionCreators(filmChangeDate, dispatch),\n  filmChangeFormat: bindActionCreators(filmChangeFormat, dispatch),\n  filmChangeTag: bindActionCreators(filmChangeTag, dispatch) //saveFilm: bindActionCreators(saveFilm, dispatch),\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\n\nconst LoadCard = () => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  loading: true,\n  actions: [React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n});\n\nconst RenderCard = ({\n  data,\n  filmChangeName,\n  filmChangeDate,\n  filmChangeFormat,\n  filmAddTag,\n  filmDeleteTag\n}) => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  actions: [React.createElement(Popconfirm, {\n    key: \"save\",\n    title: \"Are you sure Save this Worker?\" //onConfirm={updateWorker}\n    ,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    key: \"delete\",\n    title: \"Are you sure Delete this Worker?\" //onConfirm={deleteWorker}\n    ,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 86\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109\n  },\n  __self: this\n}, \"Name:\"), React.createElement(Input, {\n  value: data.name,\n  onChange: changeName,\n  placeholder: \"Name...\",\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111\n  },\n  __self: this\n}, \"Release:\"), React.createElement(DatePicker, {\n  value: data.name,\n  onChange: changeName,\n  onChange: e => console.log(moment(e.valueOf()).format(\"YYYY-MM-DD\")),\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 113\n  },\n  __self: this\n}, \"Format:\"), React.createElement(Select, {\n  value: data.format,\n  onChange: onChange,\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114\n  },\n  __self: this\n}, ['VHS', 'DVD', 'Blu-Ray'].map(el => React.createElement(Option, {\n  value: el,\n  key: el,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 116\n  },\n  __self: this\n}, el))), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 119\n  },\n  __self: this\n}, \"Actors:\"), React.createElement(EditableTagGroup, {\n  actors: data.actors,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 120\n  },\n  __self: this\n}));","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/pages/add.js"],"names":["React","Card","Icon","Popconfirm","Input","Select","DatePicker","moment","connect","bindActionCreators","filmChangeName","filmChangeDate","filmChangeFormat","filmChangeTag","saveFilm","WorkersBreadcrumb","EditableTagGroup","Option","breadcrumbs","path","breadcrumbName","Task","Component","componentDidMount","render","props","load","data","filmAddTag","filmDeleteTag","mapStateToProps","state","film","mapDispatchToProps","dispatch","LoadCard","width","margin","RenderCard","name","changeName","e","console","log","valueOf","format","onChange","map","el","actors"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport { filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, saveFilm } from '../store/action'\n//component\nimport WorkersBreadcrumb from '../components/breadcrumb'\nimport EditableTagGroup from '../components/tagGroup'\n\nconst { Option } = Select\n\nlet breadcrumbs = [\n    {\n        path: '/',\n        breadcrumbName: 'Films',\n    },\n    {\n        path: '/add/',\n        breadcrumbName: 'Add',\n    }\n]\n\nclass Task extends React.Component {\n    componentDidMount() {\n\n    }\n    render() {\n        let { load, data } = this.props\n        return (\n            <React.Fragment>\n                <WorkersBreadcrumb breadcrumbs={breadcrumbs} />\n                {\n                    load\n                        ?\n                        <LoadCard />\n                        :\n                        <RenderCard\n                            data={data}\n                            filmChangeName={this.props.filmChangeName}\n                            filmChangeDate={this.props.filmChangeDate}\n                            filmChangeFormat={this.props.filmChangeFormat}\n                            filmAddTag={this.props.filmAddTag}\n                            filmDeleteTag={this.props.filmDeleteTag}\n                        />\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    load: state.film.load,\n    data: state.film.data\n})\nconst mapDispatchToProps = dispatch => ({\n    filmChangeName: bindActionCreators(filmChangeName, dispatch),\n    filmChangeDate: bindActionCreators(filmChangeDate, dispatch),\n    filmChangeFormat: bindActionCreators(filmChangeFormat, dispatch),\n    filmChangeTag: bindActionCreators(filmChangeTag, dispatch),\n    //saveFilm: bindActionCreators(saveFilm, dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)\n\nconst LoadCard = () =>\n    <Card style={{ width: 300, margin: '20px auto' }} loading={true}\n        actions={[\n            <Popconfirm\n                disabled\n                key='save'\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                disabled\n                key='delete'\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}>\n    </Card>\n\nconst RenderCard = ({ data, filmChangeName, filmChangeDate, filmChangeFormat, filmAddTag, filmDeleteTag }) =>\n    <Card\n        style={{ width: 300, margin: '20px auto' }}\n        actions={[\n            <Popconfirm\n                key='save'\n                title=\"Are you sure Save this Worker?\"\n                //onConfirm={updateWorker}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                key='delete'\n                title=\"Are you sure Delete this Worker?\"\n                //onConfirm={deleteWorker}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}\n    >\n        <span>Name:</span>\n        <Input value={data.name} onChange={changeName} placeholder=\"Name...\" style={{ width: '100%' }} />\n        <span>Release:</span>\n        <DatePicker value={data.name} onChange={changeName} onChange={(e) => console.log(moment(e.valueOf()).format(\"YYYY-MM-DD\"))} style={{ width: '100%' }} />\n        <span>Format:</span>\n        <Select value={data.format} onChange={onChange} style={{ width: '100%' }}>\n            {\n                ['VHS', 'DVD', 'Blu-Ray'].map(el => <Option value={el} key={el}>{el}</Option>)\n            }\n        </Select>\n        <span>Actors:</span>\n        <EditableTagGroup actors={data.actors} />\n    </Card>"]},"metadata":{},"sourceType":"module"}