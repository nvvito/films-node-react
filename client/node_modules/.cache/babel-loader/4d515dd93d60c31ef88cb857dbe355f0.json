{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/pages/films.js\";\nimport React from 'react';\nimport { List, Skeleton, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { fetchFilms, openModal, closeModal, addTasks, editTasks, openUpdate, closeUpdate } from '../store/action'; //component\n\nimport ListPagination from '../components/pagination';\nimport ListSort from '../components/sort'; //import ModalFormAdd from '../components/modalFormAdd'\n//import ModalFormUpdate from '../components/modalFormUpdate'\n\nclass Tasks extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.props.fetchFilms();\n  }\n  /*componentWillReceiveProps(nextProps) {\n      if (nextProps.arr.length !== this.props.arr.length) this.props.fetchFilms(this.props.page, this.props.sort_field, this.props.sort_direction)\n  }*/\n\n  /*handleCreate = form => {\n      form.validateFields((err, values) => {\n          if (err) {\n              return;\n          }\n          form.resetFields()\n          this.props.closeModal()\n          this.props.addTasks(values)\n      })\n  }\n  handleUpdate = (form, id) => {\n      form.validateFields((err, values) => {\n          if (err) {\n              return;\n          }\n          form.resetFields()\n          this.props.closeUpdate()\n          this.props.editTasks(values, id, this.props.auth.token)\n      })\n  }\n  openUpdate(id) {\n      this.props.openUpdate(id)\n  }*/\n\n\n  render() {\n    let _this$props = this.props,\n        count = _this$props.count,\n        load = _this$props.load,\n        list = _this$props.list;\n    return React.createElement(\"div\", {\n      className: \"list-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, !load ? React.createElement(TasksList, {\n      list: list,\n      count: count,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }) : React.createElement(LoadData, {\n      size: 5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  count: state.films.count,\n  page: state.films.page,\n  sort_field: state.films.sort_field,\n  sort_direction: state.films.sort_direction,\n  load: state.films.load,\n  list: state.films.list\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchFilms: bindActionCreators(fetchFilms, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks); //helper\n//skeleton\n\nconst LoadData = ({\n  size\n}) => {\n  let list = [];\n\n  for (let i = 0; i < size; i++) list.push(React.createElement(Skeleton, {\n    title: false,\n    loading: true,\n    active: true,\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n\n  return list;\n}; //List\n\n\nconst TasksList = ({\n  list,\n  count\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 86\n  },\n  __self: this\n}, React.createElement(Button, {\n  type: \"primary\",\n  shape: \"circle\",\n  icon: \"file-add\",\n  size: \"large\",\n  className: \"add-user-btn\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 87\n  },\n  __self: this\n}), count ? React.createElement(ListSort, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 91\n  },\n  __self: this\n}) : \"\", React.createElement(List, {\n  className: \"demo-loadmore-list\",\n  itemLayout: \"horizontal\",\n  dataSource: list,\n  renderItem: item => React.createElement(ListElement, {\n    data: item,\n    key: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 95\n  },\n  __self: this\n}), count > 5 ? React.createElement(ListPagination, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104\n  },\n  __self: this\n}) : ''); //ListElement\n\n\nconst ListElement = ({\n  data\n}) => {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(List.Item, {\n    actions: [React.createElement(\"a\", {\n      key: \"list-loadmore-more\",\n      href: \"#\",\n      onClick: () => {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"more\")],\n    className: data.status === 10 ? 'item-list-done' : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(List.Item.Meta, {\n    title: 'Name: ' + data.username,\n    description: 'Email: ' + data.email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }), 'Text: ' + data.text));\n};","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/pages/films.js"],"names":["React","List","Skeleton","Button","connect","bindActionCreators","fetchFilms","openModal","closeModal","addTasks","editTasks","openUpdate","closeUpdate","ListPagination","ListSort","Tasks","Component","constructor","props","componentDidMount","render","count","load","list","mapStateToProps","state","films","page","sort_field","sort_direction","mapDispatchToProps","dispatch","LoadData","size","i","push","TasksList","item","id","ListElement","data","status","username","email","text"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { List, Skeleton, Button } from 'antd'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport { fetchFilms, openModal, closeModal, addTasks, editTasks, openUpdate, closeUpdate } from '../store/action'\n//component\nimport ListPagination from '../components/pagination'\nimport ListSort from '../components/sort'\n//import ModalFormAdd from '../components/modalFormAdd'\n//import ModalFormUpdate from '../components/modalFormUpdate'\n\n\nclass Tasks extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n    componentDidMount() {\n        this.props.fetchFilms()\n    }\n    /*componentWillReceiveProps(nextProps) {\n        if (nextProps.arr.length !== this.props.arr.length) this.props.fetchFilms(this.props.page, this.props.sort_field, this.props.sort_direction)\n    }*/\n    /*handleCreate = form => {\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n            form.resetFields()\n            this.props.closeModal()\n            this.props.addTasks(values)\n        })\n    }\n    handleUpdate = (form, id) => {\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n            form.resetFields()\n            this.props.closeUpdate()\n            this.props.editTasks(values, id, this.props.auth.token)\n        })\n    }\n    openUpdate(id) {\n        this.props.openUpdate(id)\n    }*/\n    render() {\n        let { count, load, list } = this.props\n        return (\n            <div className='list-body'>\n                {\n                    !load\n                        ?\n                        <TasksList list={list} count={count} />\n                        :\n                        <LoadData size={5} />\n                }\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    count: state.films.count,\n    page: state.films.page,\n    sort_field: state.films.sort_field,\n    sort_direction: state.films.sort_direction,\n    load: state.films.load,\n    list: state.films.list,\n})\nconst mapDispatchToProps = dispatch => ({\n    fetchFilms: bindActionCreators(fetchFilms, dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks)\n\n//helper\n//skeleton\nconst LoadData = ({ size }) => {\n    let list = []\n    for (let i = 0; i < size; i++) list.push(<Skeleton title={false} loading={true} active key={i}></Skeleton>)\n    return list\n}\n//List\nconst TasksList = ({ list, count }) =>\n    <div>\n        <Button type=\"primary\" shape=\"circle\" icon=\"file-add\" size='large' className='add-user-btn' />\n        {\n            count\n                ?\n                <ListSort />\n                :\n                \"\"\n        }\n        <List\n            className=\"demo-loadmore-list\"\n            itemLayout=\"horizontal\"\n            dataSource={list}\n            renderItem={item => <ListElement data={item} key={item.id} />}\n        />\n        {\n            count > 5\n                ?\n                <ListPagination />\n                : ''\n        }\n    </div>\n//ListElement\nconst ListElement = ({ data }) => {\n    return (\n        <React.Fragment>\n            <List.Item\n                actions={[<a key=\"list-loadmore-more\" href='#' onClick={() => {}}>more</a>]}\n                className={data.status === 10 ? 'item-list-done' : ''}\n            >\n                <List.Item.Meta\n                    title={'Name: ' + data.username}\n                    description={'Email: ' + data.email}\n\n                />\n                {'Text: ' + data.text}\n            </List.Item>\n        </React.Fragment>\n    )\n}"]},"metadata":{},"sourceType":"module"}