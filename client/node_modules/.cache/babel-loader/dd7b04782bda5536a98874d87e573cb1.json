{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/components/tagGroup.js\";\nimport React from 'react';\nimport { Tag, Input, Tooltip, Icon, message } from 'antd';\n\nclass EditableTagGroup extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      inputVisible: false,\n      inputValue: ''\n    };\n\n    this.handleClose = removedTag => {\n      const actors = this.props.action.filter((actor, i) => i !== removedTag);\n      this.props.filmChangeTag(actors);\n    };\n\n    this.showInput = () => {\n      this.setState({\n        inputVisible: true\n      }, () => this.input.focus());\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        inputValue: e.target.value\n      });\n    };\n\n    this.handleInputConfirm = () => {\n      const inputValue = this.state.inputValue;\n      let actors = this.props.actors;\n      let actor = inputValue.split(' ').filter(el => el !== '');\n\n      if (actor.length === 2) {\n        actors = [...actors, {\n          f_name: actor[0],\n          l_name: actor[1]\n        }];\n        this.setState({\n          inputVisible: false,\n          inputValue: ''\n        });\n        this.props.filmChangeTag(actors);\n      } else {\n        message.error('Name and surname must be entered!');\n        this.setState({\n          inputVisible: false,\n          inputValue: ''\n        });\n      }\n    };\n\n    this.saveInputRef = input => this.input = input;\n  }\n\n  render() {\n    const _this$state = this.state,\n          inputVisible = _this$state.inputVisible,\n          inputValue = _this$state.inputValue;\n    const actors = this.props.actors;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, actors.map((actor, i) => {\n      let tag = \"\".concat(actor.f_name, \" \").concat(actor.l_name);\n      const isLongTag = tag.length > 20;\n      const tagElem = React.createElement(Tag, {\n        key: tag,\n        closable: true,\n        onClose: () => this.handleClose(i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, isLongTag ? \"\".concat(tag.slice(0, 20), \"...\") : tag);\n      return isLongTag ? React.createElement(Tooltip, {\n        title: tag,\n        key: tag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, tagElem) : tagElem;\n    }), inputVisible && React.createElement(Input, {\n      ref: this.saveInputRef,\n      type: \"text\",\n      size: \"small\",\n      style: {\n        width: 100\n      },\n      value: inputValue,\n      onChange: this.handleInputChange,\n      onBlur: this.handleInputConfirm,\n      onPressEnter: this.handleInputConfirm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), !inputVisible && React.createElement(Tag, {\n      onClick: this.showInput,\n      style: {\n        background: '#fff',\n        borderStyle: 'dashed'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), \" New Tag\"));\n  }\n\n}\n\nexport default EditableTagGroup;","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/components/tagGroup.js"],"names":["React","Tag","Input","Tooltip","Icon","message","EditableTagGroup","Component","state","inputVisible","inputValue","handleClose","removedTag","actors","props","action","filter","actor","i","filmChangeTag","showInput","setState","input","focus","handleInputChange","e","target","value","handleInputConfirm","split","el","length","f_name","l_name","error","saveInputRef","render","map","tag","isLongTag","tagElem","slice","width","background","borderStyle"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Tag, Input, Tooltip, Icon, message } from 'antd'\n\nclass EditableTagGroup extends React.Component {\n    state = {\n        inputVisible: false,\n        inputValue: '',\n    }\n\n    handleClose = removedTag => {\n        const actors = this.props.action.filter((actor, i) => i !== removedTag)\n        this.props.filmChangeTag(actors)\n    }\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    }\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value })\n    }\n\n    handleInputConfirm = () => {\n        const { inputValue } = this.state\n        let { actors } = this.props\n        let actor = inputValue.split(' ').filter(el => el !== '')\n        if (actor.length === 2) {\n            actors = [...actors, { f_name: actor[0], l_name: actor[1] }]\n            this.setState({\n                inputVisible: false,\n                inputValue: '',\n            })\n            this.props.filmChangeTag(actors)\n        } else {\n            message.error('Name and surname must be entered!')\n            this.setState({\n                inputVisible: false,\n                inputValue: '',\n            })\n        }\n    }\n\n    saveInputRef = input => (this.input = input)\n\n    render() {\n        const { inputVisible, inputValue } = this.state\n        const { actors } = this.props\n        return (\n            <div>\n                {\n                    actors.map((actor, i) => {\n                        let tag = `${actor.f_name} ${actor.l_name}`\n                        const isLongTag = tag.length > 20\n                        const tagElem = (\n                            <Tag key={tag} closable onClose={() => this.handleClose(i)}>\n                                {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                            </Tag>\n                        )\n                        return isLongTag ? (\n                            <Tooltip title={tag} key={tag}>\n                                {tagElem}\n                            </Tooltip>\n                        ) : (\n                                tagElem\n                            )\n                    })\n                }\n                {\n                    inputVisible && (\n                        <Input\n                            ref={this.saveInputRef}\n                            type=\"text\"\n                            size=\"small\"\n                            style={{ width: 100 }}\n                            value={inputValue}\n                            onChange={this.handleInputChange}\n                            onBlur={this.handleInputConfirm}\n                            onPressEnter={this.handleInputConfirm}\n                        />\n                    )\n                }\n                {\n                    !inputVisible && (\n                        <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n                            <Icon type=\"plus\" /> New Tag\n                        </Tag>\n                    )\n                }\n            </div>\n        )\n    }\n}\nexport default EditableTagGroup"]},"metadata":{},"sourceType":"module"}