{"ast":null,"code":"import { message } from 'antd'; //tasks\n\nexport const fetchFilms = (page, sort_field, sort_direction) => dispatch => {\n  dispatch({\n    type: 'START_LOAD_FILMS',\n    payload: {\n      page: page,\n      sort_field: sort_field,\n      sort_direction: sort_direction\n    }\n  });\n  fetch(\"/api/film/?page=\".concat(page, \"&sort_field=\").concat(sort_field, \"&sort_direction=\").concat(sort_direction)).then(res => res.json()).then(data => {\n    setTimeout(() => {\n      if (data.status) {\n        dispatch({\n          type: 'SUCCESS_LOAD_FILMS',\n          payload: {\n            list: data.message.result,\n            count: Number(data.message.count)\n          }\n        });\n      } else {\n        message.error('Error Load Data!');\n        dispatch({\n          type: 'FAILED_LOAD_FILMS'\n        });\n      }\n    }, 500);\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Load Data!');\n    dispatch({\n      type: 'FAILED_LOAD_FILMS'\n    });\n  });\n};\nexport const fetchFilm = id => dispatch => {\n  dispatch({\n    type: 'START_LOAD_FILM'\n  });\n  fetch(\"/api/film/\".concat(id)).then(res => res.json()).then(data => {\n    setTimeout(() => {\n      if (data.status) {\n        dispatch({\n          type: 'SUCCESS_LOAD_FILM',\n          payload: data.message\n        });\n      } else {\n        message.error('Error Load Data!');\n        dispatch({\n          type: 'FAILED_LOAD_FILM'\n        });\n      }\n    }, 500);\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Load Data!');\n    dispatch({\n      type: 'FAILED_LOAD_FILM'\n    });\n  });\n};\nexport const filmChangeName = e => ({\n  type: 'CHANGE_NAME',\n  payload: e.target.value\n});\nexport const filmChangeDate = value => ({\n  type: 'CHANGE_DATE',\n  payload: value.valueOf()\n});\nexport const filmChangeFormat = value => ({\n  type: 'CHANGE_FORMAT',\n  payload: value\n});\nexport const filmChangeTag = value => ({\n  type: 'CHANGE_TAG',\n  payload: value\n});\nexport const saveFilm = (data, history) => dispatch => {\n  dispatch({\n    type: 'START_LOAD_FILM'\n  });\n  fetch('/api/film/', {\n    method: 'post',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(res => res.json()).then(data => {\n    if (data.status) setTimeout(() => {\n      dispatch({\n        type: 'SUCCESS_LOAD_FILM',\n        payload: data.message\n      });\n      history.push(\"/\".concat(data.message._id));\n      message.success('Success Create!');\n    }, 500);else {\n      console.log(data);\n      message.error('Create Film Error!');\n      dispatch({\n        type: 'FAILED_CREATE'\n      });\n    }\n  }).catch(err => {\n    console.log(data);\n    message.error('Create Worker Error!');\n    dispatch({\n      type: 'FAILED_CREATE'\n    });\n  });\n};","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/store/action.js"],"names":["message","fetchFilms","page","sort_field","sort_direction","dispatch","type","payload","fetch","then","res","json","data","setTimeout","status","list","result","count","Number","error","catch","err","console","log","fetchFilm","id","filmChangeName","e","target","value","filmChangeDate","valueOf","filmChangeFormat","filmChangeTag","saveFilm","history","method","headers","body","JSON","stringify","push","_id","success"],"mappings":"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","sourcesContent":["import { message } from 'antd'\n\n//tasks\nexport const fetchFilms = (page, sort_field, sort_direction) => dispatch => {\n  dispatch({\n    type: 'START_LOAD_FILMS', payload: {\n      page: page,\n      sort_field: sort_field,\n      sort_direction: sort_direction\n    }\n  })\n  fetch(`/api/film/?page=${page}&sort_field=${sort_field}&sort_direction=${sort_direction}`)\n    .then(res => res.json())\n    .then(data => {\n      setTimeout(() => {\n        if (data.status) {\n          dispatch({\n            type: 'SUCCESS_LOAD_FILMS',\n            payload: {\n              list: data.message.result,\n              count: Number(data.message.count),\n            }\n          })\n        } else {\n          message.error('Error Load Data!')\n          dispatch({ type: 'FAILED_LOAD_FILMS' })\n        }\n      }, 500)\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Load Data!')\n      dispatch({ type: 'FAILED_LOAD_FILMS' })\n    })\n}\n\nexport const fetchFilm = id => dispatch => {\n  dispatch({ type: 'START_LOAD_FILM' })\n  fetch(`/api/film/${id}`)\n    .then(res => res.json())\n    .then(data => {\n      setTimeout(() => {\n        if (data.status) {\n          dispatch({\n            type: 'SUCCESS_LOAD_FILM',\n            payload: data.message\n          })\n        } else {\n          message.error('Error Load Data!')\n          dispatch({ type: 'FAILED_LOAD_FILM' })\n        }\n      }, 500)\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Load Data!')\n      dispatch({ type: 'FAILED_LOAD_FILM' })\n    })\n}\n\nexport const filmChangeName = e => ({ type: 'CHANGE_NAME', payload: e.target.value })\nexport const filmChangeDate = value => ({ type: 'CHANGE_DATE', payload: value.valueOf() })\nexport const filmChangeFormat = value => ({ type: 'CHANGE_FORMAT', payload: value })\nexport const filmChangeTag = value => ({ type: 'CHANGE_TAG', payload: value })\n\nexport const saveFilm = (data, history) => dispatch => {\n  dispatch({ type: 'START_LOAD_FILM' })\n  fetch('/api/film/', {\n    method: 'post',\n    headers: {\n      'content-type': 'application/json',\n    },\n    body: JSON.stringify(data)\n  })\n    .then(res => res.json())\n    .then(data => {\n      if (data.status) setTimeout(() => {\n        dispatch({\n          type: 'SUCCESS_LOAD_FILM',\n          payload: data.message\n        })\n        history.push(`/${data.message._id}`)\n        message.success('Success Create!')\n      }, 500)\n      else {\n        console.log(data)\n        message.error('Create Film Error!')\n        dispatch({ type: 'FAILED_CREATE' })\n      }\n    })\n    .catch(err => {\n      console.log(data)\n      message.error('Create Worker Error!')\n      dispatch({ type: 'FAILED_CREATE' })\n    })\n}"]},"metadata":{},"sourceType":"module"}