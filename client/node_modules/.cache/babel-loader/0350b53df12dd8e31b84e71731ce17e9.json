{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/components/tagGroup.js\";\nimport React from 'react';\nimport { Tag, Input, Tooltip, Icon } from 'antd';\n\nclass EditableTagGroup extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tags: ['Unremovable', 'Tag 2', 'Tag 3'],\n      inputVisible: false,\n      inputValue: ''\n    };\n\n    this.handleClose = removedTag => {\n      const tags = this.state.tags.filter(tag => tag !== removedTag);\n      console.log(tags);\n      this.setState({\n        tags\n      });\n    };\n\n    this.showInput = () => {\n      this.setState({\n        inputVisible: true\n      }, () => this.input.focus());\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        inputValue: e.target.value\n      });\n    };\n\n    this.handleInputConfirm = () => {\n      const inputValue = this.state.inputValue;\n      let tags = this.state.tags;\n\n      if (inputValue && tags.indexOf(inputValue) === -1) {\n        tags = [...tags, inputValue];\n      }\n\n      console.log(tags);\n      this.setState({\n        tags,\n        inputVisible: false,\n        inputValue: ''\n      });\n    };\n\n    this.saveInputRef = input => this.input = input;\n  }\n\n  render() {\n    const _this$state = this.state,\n          tags = _this$state.tags,\n          inputVisible = _this$state.inputVisible,\n          inputValue = _this$state.inputValue;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, tags.map((tag, index) => {\n      const isLongTag = tag.length > 20;\n      const tagElem = React.createElement(Tag, {\n        key: tag,\n        closable: index !== 0,\n        onClose: () => this.handleClose(tag),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, isLongTag ? \"\".concat(tag.slice(0, 20), \"...\") : tag);\n      return isLongTag ? React.createElement(Tooltip, {\n        title: tag,\n        key: tag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, tagElem) : tagElem;\n    }), inputVisible && React.createElement(Input, {\n      ref: this.saveInputRef,\n      type: \"text\",\n      size: \"small\",\n      style: {\n        width: 78\n      },\n      value: inputValue,\n      onChange: this.handleInputChange,\n      onBlur: this.handleInputConfirm,\n      onPressEnter: this.handleInputConfirm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), !inputVisible && React.createElement(Tag, {\n      onClick: this.showInput,\n      style: {\n        background: '#fff',\n        borderStyle: 'dashed'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      type: \"plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), \" New Tag\"));\n  }\n\n}\n\nexport default EditableTagGroup;","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/components/tagGroup.js"],"names":["React","Tag","Input","Tooltip","Icon","EditableTagGroup","Component","state","tags","inputVisible","inputValue","handleClose","removedTag","filter","tag","console","log","setState","showInput","input","focus","handleInputChange","e","target","value","handleInputConfirm","indexOf","saveInputRef","render","map","index","isLongTag","length","tagElem","slice","width","background","borderStyle"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Tag, Input, Tooltip, Icon } from 'antd'\n\nclass EditableTagGroup extends React.Component {\n    state = {\n        tags: ['Unremovable', 'Tag 2', 'Tag 3'],\n        inputVisible: false,\n        inputValue: '',\n    }\n\n    handleClose = removedTag => {\n        const tags = this.state.tags.filter(tag => tag !== removedTag)\n        console.log(tags)\n        this.setState({ tags })\n    }\n\n    showInput = () => {\n        this.setState({ inputVisible: true }, () => this.input.focus());\n    }\n\n    handleInputChange = e => {\n        this.setState({ inputValue: e.target.value })\n    }\n\n    handleInputConfirm = () => {\n        const { inputValue } = this.state\n        let { tags } = this.state\n        if (inputValue && tags.indexOf(inputValue) === -1) {\n            tags = [...tags, inputValue];\n        }\n        console.log(tags)\n        this.setState({\n            tags,\n            inputVisible: false,\n            inputValue: '',\n        })\n    }\n\n    saveInputRef = input => (this.input = input);\n\n    render() {\n        const { tags, inputVisible, inputValue } = this.state;\n        return (\n            <div>\n                {tags.map((tag, index) => {\n                    const isLongTag = tag.length > 20;\n                    const tagElem = (\n                        <Tag key={tag} closable={index !== 0} onClose={() => this.handleClose(tag)}>\n                            {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                        </Tag>\n                    );\n                    return isLongTag ? (\n                        <Tooltip title={tag} key={tag}>\n                            {tagElem}\n                        </Tooltip>\n                    ) : (\n                            tagElem\n                        )\n                })}\n                {inputVisible && (\n                    <Input\n                        ref={this.saveInputRef}\n                        type=\"text\"\n                        size=\"small\"\n                        style={{ width: 78 }}\n                        value={inputValue}\n                        onChange={this.handleInputChange}\n                        onBlur={this.handleInputConfirm}\n                        onPressEnter={this.handleInputConfirm}\n                    />\n                )}\n                {!inputVisible && (\n                    <Tag onClick={this.showInput} style={{ background: '#fff', borderStyle: 'dashed' }}>\n                        <Icon type=\"plus\" /> New Tag\n          </Tag>\n                )}\n            </div>\n        )\n    }\n}\nexport default EditableTagGroup"]},"metadata":{},"sourceType":"module"}