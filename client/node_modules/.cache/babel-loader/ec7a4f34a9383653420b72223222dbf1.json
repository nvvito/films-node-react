{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/pages/add.js\";\nimport React from 'react';\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { fetchFilm, filmChangeName, filmChangeDate, filmChangeFormat, filmAddTag, filmDeleteTag, saveFilm } from '../store/action'; //component\n\nimport WorkersBreadcrumb from '../components/breadcrumb';\nimport EditableTagGroup from '../components/tagGroup';\nconst Option = Select.Option;\nlet breadcrumb = [{\n  path: '/',\n  breadcrumbName: 'Films'\n}];\n\nclass Task extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    let _this$props = this.props,\n        load = _this$props.load,\n        data = _this$props.data;\n    let breadcrumbs = [...breadcrumb, {\n      breadcrumbName: load ? '...' : data.name ? data.name : 'Noname'\n    }];\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }, React.createElement(WorkersBreadcrumb, {\n      breadcrumbs: breadcrumbs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), load ? React.createElement(LoadCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }) : React.createElement(RenderCard, {\n      data: data,\n      changeName: this.props.WorkerChangeName\n      /*changeAge={this.props.WorkerChangeAge}\n      changePhones={this.props.WorkerChangePhones}\n      changeEmails={this.props.WorkerChangeEmails}\n      changeDepartment={this.props.WorkerChangeDepartment}\n      deleteWorker={this.deleteWorker}\n      updateWorker={this.updateWorker}*/\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  load: state.film.load,\n  data: state.film.data\n});\n\nconst mapDispatchToProps = dispatch => ({// fetchFilm: bindActionCreators(fetchFilm, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\n\nconst LoadCard = () => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  loading: true,\n  actions: [React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n});\n\nconst RenderCard = ({\n  data\n}) => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  actions: [React.createElement(Popconfirm, {\n    key: \"save\",\n    title: \"Are you sure Save this Worker?\" //onConfirm={updateWorker}\n    ,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    key: \"delete\",\n    title: \"Are you sure Delete this Worker?\" //onConfirm={deleteWorker}\n    ,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 80\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103\n  },\n  __self: this\n}, \"Name:\"), React.createElement(Input\n/*value={worker.name} onChange={changeName} */\n, {\n  placeholder: \"Name...\",\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 104\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 105\n  },\n  __self: this\n}, \"Release:\"), React.createElement(DatePicker\n/*value={worker.name} onChange={changeName}*/\n, {\n  onChange: e => console.log(moment(e.valueOf()).format(\"YYYY-MM-DD\")),\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n}, \"Format:\"), React.createElement(Select\n/*value={value} onChange={onChange}*/\n, {\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 108\n  },\n  __self: this\n}, ['VHS', 'DVD', 'Blu-Ray'].map(el => React.createElement(Option, {\n  value: el,\n  key: el,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110\n  },\n  __self: this\n}, el))), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 113\n  },\n  __self: this\n}, \"Actors:\"), React.createElement(EditableTagGroup, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114\n  },\n  __self: this\n}));","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/pages/add.js"],"names":["React","Card","Icon","Popconfirm","Input","Select","DatePicker","moment","connect","bindActionCreators","fetchFilm","filmChangeName","filmChangeDate","filmChangeFormat","filmAddTag","filmDeleteTag","saveFilm","WorkersBreadcrumb","EditableTagGroup","Option","breadcrumb","path","breadcrumbName","Task","Component","componentDidMount","render","props","load","data","breadcrumbs","name","WorkerChangeName","mapStateToProps","state","film","mapDispatchToProps","dispatch","LoadCard","width","margin","RenderCard","e","console","log","valueOf","format","map","el"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport {fetchFilm,filmChangeName,filmChangeDate,filmChangeFormat,filmAddTag,filmDeleteTag,saveFilm} from '../store/action'\n//component\nimport WorkersBreadcrumb from '../components/breadcrumb'\nimport EditableTagGroup from '../components/tagGroup'\n\nconst { Option } = Select\n\nlet breadcrumb = [\n    {\n        path: '/',\n        breadcrumbName: 'Films',\n    }\n]\n\nclass Task extends React.Component {\n    componentDidMount() {\n\n    }\n    render() {\n        let { load, data } = this.props\n        let breadcrumbs = [...breadcrumb, { breadcrumbName: load ? '...' : data.name ? data.name : 'Noname' }]\n        return (\n            <React.Fragment>\n                <WorkersBreadcrumb breadcrumbs={breadcrumbs} />\n                {\n                    load\n                        ?\n                        <LoadCard />\n                        :\n                        <RenderCard data={data}\n                            changeName={this.props.WorkerChangeName}\n                        /*changeAge={this.props.WorkerChangeAge}\n                        changePhones={this.props.WorkerChangePhones}\n                        changeEmails={this.props.WorkerChangeEmails}\n                        changeDepartment={this.props.WorkerChangeDepartment}\n                        deleteWorker={this.deleteWorker}\n                        updateWorker={this.updateWorker}*/\n                        />\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    load: state.film.load,\n    data: state.film.data\n})\nconst mapDispatchToProps = dispatch => ({\n    // fetchFilm: bindActionCreators(fetchFilm, dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)\n\nconst LoadCard = () =>\n    <Card style={{ width: 300, margin: '20px auto' }} loading={true}\n        actions={[\n            <Popconfirm\n                disabled\n                key='save'\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                disabled\n                key='delete'\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}>\n    </Card>\n\nconst RenderCard = ({ data }) =>\n    <Card\n        style={{ width: 300, margin: '20px auto' }}\n        actions={[\n            <Popconfirm\n                key='save'\n                title=\"Are you sure Save this Worker?\"\n                //onConfirm={updateWorker}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                key='delete'\n                title=\"Are you sure Delete this Worker?\"\n                //onConfirm={deleteWorker}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}\n    >\n        <span>Name:</span>\n        <Input /*value={worker.name} onChange={changeName} */ placeholder=\"Name...\" style={{ width: '100%' }} />\n        <span>Release:</span>\n        <DatePicker /*value={worker.name} onChange={changeName}*/onChange={(e)=>console.log(moment(e.valueOf()).format(\"YYYY-MM-DD\"))} style={{ width: '100%' }} />\n        <span>Format:</span>\n        <Select /*value={value} onChange={onChange}*/ style={{ width: '100%' }}>\n            {\n                ['VHS', 'DVD', 'Blu-Ray'].map(el => <Option value={el} key={el}>{el}</Option>)\n            }\n        </Select>\n        <span>Actors:</span>\n        <EditableTagGroup />\n    </Card>"]},"metadata":{},"sourceType":"module"}