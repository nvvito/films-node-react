{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/pages/films.js\";\nimport React from 'react';\nimport { List, Skeleton, Button } from 'antd';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { fetchTasks, openModal, closeModal, addTasks, editTasks, openUpdate, closeUpdate } from '../store/action'; //component\n\nimport TasksBreadcrumb from '../components/breadcrumb';\nimport ListPagination from '../components/pagination';\nimport ListSort from '../components/sort';\nimport ModalFormAdd from '../components/modalFormAdd';\nimport ModalFormUpdate from '../components/modalFormUpdate';\nlet breadcrumbs = [{\n  path: '/',\n  breadcrumbName: 'Home'\n}, {\n  breadcrumbName: 'Tasks'\n}];\n\nclass Tasks extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {//this.props.fetchTasks(1, 'id', 'asc')\n  }\n\n  componentWillReceiveProps(nextProps) {} //if (nextProps.arr.length !== this.props.arr.length) this.props.fetchTasks(this.props.page, this.props.sort_field, this.props.sort_direction)\n\n  /*handleCreate = form => {\n      form.validateFields((err, values) => {\n          if (err) {\n              return;\n          }\n          form.resetFields()\n          this.props.closeModal()\n          this.props.addTasks(values)\n      })\n  }\n  handleUpdate = (form, id) => {\n      form.validateFields((err, values) => {\n          if (err) {\n              return;\n          }\n          form.resetFields()\n          this.props.closeUpdate()\n          this.props.editTasks(values, id, this.props.auth.token)\n      })\n  }\n  openUpdate(id) {\n      this.props.openUpdate(id)\n  }*/\n\n\n  render() {\n    let _this$props = this.props,\n        auth = _this$props.auth,\n        count = _this$props.count,\n        load = _this$props.load,\n        arr = _this$props.arr,\n        openModal = _this$props.openModal;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(TasksBreadcrumb, {\n      breadcrumbs: breadcrumbs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"list-body\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, !load ? React.createElement(TasksList, {\n      arr: arr,\n      count: count,\n      auth: auth,\n      openModal: openModal,\n      openUpdate: this.openUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }) : React.createElement(LoadData, {\n      size: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(ModalFormUpdate, {\n      handleUpdate: this.handleUpdate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(ModalFormAdd, {\n      handleCreate: this.handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  count: state.films.count,\n  page: state.films.page,\n  sort_field: state.films.sort_field,\n  sort_direction: state.films.sort_direction,\n  load: state.films.load,\n  list: state.films.list\n});\n\nconst mapDispatchToProps = dispatch => ({\n  /*fetchTasks: bindActionCreators(fetchTasks, dispatch),\n  openModal: bindActionCreators(openModal, dispatch),\n  openUpdate: bindActionCreators(openUpdate, dispatch),\n  closeModal: bindActionCreators(closeModal, dispatch),\n  closeUpdate: bindActionCreators(closeUpdate, dispatch),\n  addTasks: bindActionCreators(addTasks, dispatch),\n  editTasks: bindActionCreators(editTasks, dispatch),*/\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks); //helper\n//skeleton\n\nconst LoadData = ({\n  size\n}) => {\n  let list = [];\n\n  for (let i = 0; i < size; i++) list.push(React.createElement(Skeleton, {\n    title: false,\n    loading: true,\n    active: true,\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }));\n\n  return list;\n}; //List\n\n\nconst TasksList = ({\n  arr,\n  count,\n  auth,\n  openModal,\n  openUpdate\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n}, React.createElement(Button, {\n  type: \"primary\",\n  shape: \"circle\",\n  icon: \"user-add\",\n  size: \"large\",\n  className: \"add-user-btn\",\n  onClick: openModal,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 108\n  },\n  __self: this\n}), count ? React.createElement(ListSort, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112\n  },\n  __self: this\n}) : \"\", React.createElement(List, {\n  className: \"demo-loadmore-list\",\n  itemLayout: \"horizontal\",\n  dataSource: arr,\n  renderItem: item => React.createElement(ListElement, {\n    data: item,\n    key: item.id,\n    auth: auth,\n    openUpdate: openUpdate,\n    number: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 116\n  },\n  __self: this\n}), count > 3 ? React.createElement(ListPagination, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 125\n  },\n  __self: this\n}) : ''); //ListElement\n\n\nconst ListElement = ({\n  data,\n  auth,\n  openUpdate\n}) => {\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(List.Item, {\n    actions: auth.status ? [React.createElement(\"a\", {\n      key: \"list-loadmore-more\",\n      href: \"#\",\n      onClick: () => openUpdate(data.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"edit\")] : [],\n    className: data.status === 10 ? 'item-list-done' : '',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(List.Item.Meta, {\n    title: 'Name: ' + data.username,\n    description: 'Email: ' + data.email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), 'Text: ' + data.text));\n};","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/pages/films.js"],"names":["React","List","Skeleton","Button","connect","bindActionCreators","fetchTasks","openModal","closeModal","addTasks","editTasks","openUpdate","closeUpdate","TasksBreadcrumb","ListPagination","ListSort","ModalFormAdd","ModalFormUpdate","breadcrumbs","path","breadcrumbName","Tasks","Component","constructor","props","componentDidMount","componentWillReceiveProps","nextProps","render","auth","count","load","arr","handleUpdate","handleCreate","mapStateToProps","state","films","page","sort_field","sort_direction","list","mapDispatchToProps","dispatch","LoadData","size","i","push","TasksList","item","id","ListElement","data","status","username","email","text"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { List, Skeleton, Button } from 'antd'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport { fetchTasks, openModal, closeModal, addTasks, editTasks, openUpdate, closeUpdate } from '../store/action'\n//component\nimport TasksBreadcrumb from '../components/breadcrumb'\nimport ListPagination from '../components/pagination'\nimport ListSort from '../components/sort'\nimport ModalFormAdd from '../components/modalFormAdd'\nimport ModalFormUpdate from '../components/modalFormUpdate'\n\nlet breadcrumbs = [\n    {\n        path: '/',\n        breadcrumbName: 'Home',\n    },\n    {\n        breadcrumbName: 'Tasks',\n    }\n]\n\nclass Tasks extends React.Component {\n    constructor(props){\n        super(props)\n    }\n    componentDidMount() {\n        //this.props.fetchTasks(1, 'id', 'asc')\n    }\n    componentWillReceiveProps(nextProps) {\n        //if (nextProps.arr.length !== this.props.arr.length) this.props.fetchTasks(this.props.page, this.props.sort_field, this.props.sort_direction)\n    }\n    /*handleCreate = form => {\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n            form.resetFields()\n            this.props.closeModal()\n            this.props.addTasks(values)\n        })\n    }\n    handleUpdate = (form, id) => {\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n            form.resetFields()\n            this.props.closeUpdate()\n            this.props.editTasks(values, id, this.props.auth.token)\n        })\n    }\n    openUpdate(id) {\n        this.props.openUpdate(id)\n    }*/\n    render() {\n        let { auth, count, load, arr, openModal } = this.props\n        return (\n            <React.Fragment>\n                <TasksBreadcrumb breadcrumbs={breadcrumbs} />\n                <div className='list-body'>\n                    {\n                        !load\n                            ?\n                            <TasksList arr={arr} count={count} auth={auth} openModal={openModal} openUpdate={this.openUpdate} />\n                            :\n                            <LoadData size={3} />\n                    }\n                </div>\n                <ModalFormUpdate handleUpdate={this.handleUpdate} />\n                <ModalFormAdd handleCreate={this.handleCreate} />\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    count: state.films.count,\n    page: state.films.page,\n    sort_field: state.films.sort_field,\n    sort_direction: state.films.sort_direction,\n    load: state.films.load,\n    list: state.films.list,\n})\nconst mapDispatchToProps = dispatch => ({\n    /*fetchTasks: bindActionCreators(fetchTasks, dispatch),\n    openModal: bindActionCreators(openModal, dispatch),\n    openUpdate: bindActionCreators(openUpdate, dispatch),\n    closeModal: bindActionCreators(closeModal, dispatch),\n    closeUpdate: bindActionCreators(closeUpdate, dispatch),\n    addTasks: bindActionCreators(addTasks, dispatch),\n    editTasks: bindActionCreators(editTasks, dispatch),*/\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tasks)\n\n//helper\n//skeleton\nconst LoadData = ({ size }) => {\n    let list = []\n    for (let i = 0; i < size; i++) list.push(<Skeleton title={false} loading={true} active key={i}></Skeleton>)\n    return list\n}\n//List\nconst TasksList = ({ arr, count, auth, openModal, openUpdate }) =>\n    <div>\n        <Button type=\"primary\" shape=\"circle\" icon=\"user-add\" size='large' className='add-user-btn' onClick={openModal} />\n        {\n            count\n                ?\n                <ListSort />\n                :\n                \"\"\n        }\n        <List\n            className=\"demo-loadmore-list\"\n            itemLayout=\"horizontal\"\n            dataSource={arr}\n            renderItem={item => <ListElement data={item} key={item.id} auth={auth} openUpdate={openUpdate} number />}\n        />\n        {\n            count > 3\n                ?\n                <ListPagination />\n                : ''\n        }\n    </div>\n//ListElement\nconst ListElement = ({ data, auth, openUpdate }) => {\n    return (\n        <React.Fragment>\n            <List.Item\n                actions={auth.status ? [<a key=\"list-loadmore-more\" href='#' onClick={()=>openUpdate(data.id)}>edit</a>] : []}\n                className={data.status === 10 ? 'item-list-done' : ''}\n            >\n                <List.Item.Meta\n                    title={'Name: ' + data.username}\n                    description={'Email: ' + data.email}\n\n                />\n                {'Text: ' + data.text}\n            </List.Item>\n        </React.Fragment>\n    )\n}"]},"metadata":{},"sourceType":"module"}