{"ast":null,"code":"import _defineProperty from \"/home/vito/Desktop/films/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  films: {\n    list: [],\n    count: 0,\n    page: 1,\n    sort_field: '',\n    sort_direction: '',\n    load: false\n  },\n  film: {}\n};\nexport function reduser(state = initialState, action) {\n  switch (action.type) {\n    //auth\n    case 'START_LOAD_AUTH':\n      return _objectSpread({}, state, {\n        auth: _objectSpread({}, state.auth, {\n          load: true\n        })\n      });\n\n    case 'END_LOAD_AUTH':\n      return _objectSpread({}, state, {\n        auth: {\n          load: false,\n          status: action.payload.status,\n          token: action.payload.token\n        }\n      });\n\n    case 'AUTH_LOGOUT':\n      return _objectSpread({}, state, {\n        auth: _objectSpread({}, state.auth, {\n          status: false\n        }) //tasks\n\n      });\n\n    case 'START_LOAD_TASKS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          load: true,\n          page: action.payload.page,\n          sort_field: action.payload.sort_field,\n          sort_direction: action.payload.sort_direction\n        })\n      });\n\n    case 'FAILED_LOAD_TASKS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          load: false\n        })\n      });\n\n    case 'SUCCESS_LOAD_TASKS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          load: false,\n          arr: action.payload.arr,\n          count: action.payload.count\n        })\n      });\n\n    case 'ADD_TASKS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          arr: [...state.tasks.arr, action.payload]\n        })\n      });\n\n    case 'EDIT_TASKS':\n      {\n        let _arr = [...state.tasks.arr];\n\n        _arr.map(el => {\n          if (el.id === action.payload.id) {\n            el.status = action.payload.data.status;\n            el.text = action.payload.data.text;\n          }\n\n          return el;\n        });\n\n        return _objectSpread({}, state, {\n          tasks: _objectSpread({}, state.tasks, {\n            arr: _arr\n          })\n        });\n      }\n    //modal\n\n    case 'OPEN_MODAL':\n      return _objectSpread({}, state, {\n        modal: _objectSpread({}, state.modal, {\n          add: _objectSpread({}, state.modal.add, {\n            visible: true\n          })\n        })\n      });\n\n    case 'CLOSE_MODAL':\n      return _objectSpread({}, state, {\n        modal: _objectSpread({}, state.modal, {\n          add: _objectSpread({}, state.modal.add, {\n            visible: false\n          })\n        })\n      });\n\n    case 'OPEN_UPDATE':\n      {\n        let id = action.payload;\n        let status = '';\n        let text = '';\n        state.tasks.arr.map(el => {\n          if (el.id === id) {\n            status = el.status;\n            text = el.text;\n          }\n\n          return el;\n        });\n        return _objectSpread({}, state, {\n          modal: _objectSpread({}, state.modal, {\n            update: _objectSpread({}, state.modal.update, {\n              visible: true,\n              status: status,\n              text: text,\n              id: id\n            })\n          })\n        });\n      }\n\n    case 'CLOSE_UPDATE':\n      return _objectSpread({}, state, {\n        modal: _objectSpread({}, state.modal, {\n          update: _objectSpread({}, state.modal.update, {\n            visible: false,\n            status: '',\n            text: '',\n            id: ''\n          })\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/store/reduser.js"],"names":["initialState","films","list","count","page","sort_field","sort_direction","load","film","reduser","state","action","type","auth","status","payload","token","tasks","arr","_arr","map","el","id","data","text","modal","add","visible","update"],"mappings":"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","sourcesContent":["export const initialState = {\n    films: {\n        list: [],\n        count: 0,\n        page: 1,\n        sort_field: '',\n        sort_direction: '',\n        load: false,\n    },\n    film: {}\n}\n\nexport function reduser(state = initialState, action) {\n    switch (action.type) {\n        //auth\n        case 'START_LOAD_AUTH':\n            return { ...state, auth: { ...state.auth, load: true } }\n        case 'END_LOAD_AUTH':\n            return { ...state, auth: { load: false, status: action.payload.status, token: action.payload.token } }\n        case 'AUTH_LOGOUT':\n            return { ...state, auth: { ...state.auth, status: false } }\n        //tasks\n        case 'START_LOAD_TASKS':\n            return { ...state, tasks: { ...state.tasks, load: true, page: action.payload.page, sort_field: action.payload.sort_field, sort_direction: action.payload.sort_direction } }\n        case 'FAILED_LOAD_TASKS':\n            return { ...state, tasks: { ...state.tasks, load: false } }\n        case 'SUCCESS_LOAD_TASKS':\n            return { ...state, tasks: { ...state.tasks, load: false, arr: action.payload.arr, count: action.payload.count } }\n        case 'ADD_TASKS':\n            return { ...state, tasks: { ...state.tasks, arr: [...state.tasks.arr, action.payload] } }\n        case 'EDIT_TASKS': {\n            let _arr = [...state.tasks.arr]\n            _arr.map(el => {\n                if (el.id === action.payload.id) {\n                    el.status = action.payload.data.status\n                    el.text = action.payload.data.text\n                }\n                return el\n            })\n            return { ...state, tasks: { ...state.tasks, arr: _arr } }\n        }\n        //modal\n        case 'OPEN_MODAL':\n            return { ...state, modal: { ...state.modal, add: { ...state.modal.add, visible: true } } }\n        case 'CLOSE_MODAL':\n            return { ...state, modal: { ...state.modal, add: { ...state.modal.add, visible: false } } }\n        case 'OPEN_UPDATE': {\n            let id = action.payload\n            let status = ''\n            let text = ''\n            state.tasks.arr.map(el => {\n                if (el.id === id) {\n                    status = el.status\n                    text = el.text\n                }\n                return el\n            })\n            return { ...state, modal: { ...state.modal, update: { ...state.modal.update, visible: true, status: status, text: text, id: id } } }\n        }\n\n        case 'CLOSE_UPDATE':\n            return { ...state, modal: { ...state.modal, update: { ...state.modal.update, visible: false, status: '', text: '', id: '' } } }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}