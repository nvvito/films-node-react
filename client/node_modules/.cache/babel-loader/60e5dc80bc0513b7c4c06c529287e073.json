{"ast":null,"code":"import _defineProperty from \"/home/vito/Desktop/films/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  films: {\n    list: [],\n    count: 0,\n    page: 1,\n    sort_field: '',\n    sort_direction: '',\n    load: false\n  },\n  film: {}\n};\nexport function reduser(state = initialState, action) {\n  switch (action.type) {\n    //tasks\n    case 'START_LOAD_FILMS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          load: true,\n          page: action.payload.page,\n          sort_field: action.payload.sort_field,\n          sort_direction: action.payload.sort_direction\n        })\n      });\n\n    case 'FAILED_LOAD_TASKS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          load: false\n        })\n      });\n\n    case 'SUCCESS_LOAD_TASKS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          load: false,\n          arr: action.payload.arr,\n          count: action.payload.count\n        })\n      });\n\n    case 'ADD_TASKS':\n      return _objectSpread({}, state, {\n        tasks: _objectSpread({}, state.tasks, {\n          arr: [...state.tasks.arr, action.payload]\n        })\n      });\n\n    case 'EDIT_TASKS':\n      {\n        let _arr = [...state.tasks.arr];\n\n        _arr.map(el => {\n          if (el.id === action.payload.id) {\n            el.status = action.payload.data.status;\n            el.text = action.payload.data.text;\n          }\n\n          return el;\n        });\n\n        return _objectSpread({}, state, {\n          tasks: _objectSpread({}, state.tasks, {\n            arr: _arr\n          })\n        });\n      }\n    //modal\n\n    case 'OPEN_MODAL':\n      return _objectSpread({}, state, {\n        modal: _objectSpread({}, state.modal, {\n          add: _objectSpread({}, state.modal.add, {\n            visible: true\n          })\n        })\n      });\n\n    case 'CLOSE_MODAL':\n      return _objectSpread({}, state, {\n        modal: _objectSpread({}, state.modal, {\n          add: _objectSpread({}, state.modal.add, {\n            visible: false\n          })\n        })\n      });\n\n    case 'OPEN_UPDATE':\n      {\n        let id = action.payload;\n        let status = '';\n        let text = '';\n        state.tasks.arr.map(el => {\n          if (el.id === id) {\n            status = el.status;\n            text = el.text;\n          }\n\n          return el;\n        });\n        return _objectSpread({}, state, {\n          modal: _objectSpread({}, state.modal, {\n            update: _objectSpread({}, state.modal.update, {\n              visible: true,\n              status: status,\n              text: text,\n              id: id\n            })\n          })\n        });\n      }\n\n    case 'CLOSE_UPDATE':\n      return _objectSpread({}, state, {\n        modal: _objectSpread({}, state.modal, {\n          update: _objectSpread({}, state.modal.update, {\n            visible: false,\n            status: '',\n            text: '',\n            id: ''\n          })\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/store/reduser.js"],"names":["initialState","films","list","count","page","sort_field","sort_direction","load","film","reduser","state","action","type","tasks","payload","arr","_arr","map","el","id","status","data","text","modal","add","visible","update"],"mappings":"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","sourcesContent":["export const initialState = {\n    films: {\n        list: [],\n        count: 0,\n        page: 1,\n        sort_field: '',\n        sort_direction: '',\n        load: false,\n    },\n    film: {}\n}\n\nexport function reduser(state = initialState, action) {\n    switch (action.type) {\n        //tasks\n        case 'START_LOAD_FILMS':\n            return { ...state, tasks: { ...state.tasks, load: true, page: action.payload.page, sort_field: action.payload.sort_field, sort_direction: action.payload.sort_direction } }\n        case 'FAILED_LOAD_TASKS':\n            return { ...state, tasks: { ...state.tasks, load: false } }\n        case 'SUCCESS_LOAD_TASKS':\n            return { ...state, tasks: { ...state.tasks, load: false, arr: action.payload.arr, count: action.payload.count } }\n        case 'ADD_TASKS':\n            return { ...state, tasks: { ...state.tasks, arr: [...state.tasks.arr, action.payload] } }\n        case 'EDIT_TASKS': {\n            let _arr = [...state.tasks.arr]\n            _arr.map(el => {\n                if (el.id === action.payload.id) {\n                    el.status = action.payload.data.status\n                    el.text = action.payload.data.text\n                }\n                return el\n            })\n            return { ...state, tasks: { ...state.tasks, arr: _arr } }\n        }\n        //modal\n        case 'OPEN_MODAL':\n            return { ...state, modal: { ...state.modal, add: { ...state.modal.add, visible: true } } }\n        case 'CLOSE_MODAL':\n            return { ...state, modal: { ...state.modal, add: { ...state.modal.add, visible: false } } }\n        case 'OPEN_UPDATE': {\n            let id = action.payload\n            let status = ''\n            let text = ''\n            state.tasks.arr.map(el => {\n                if (el.id === id) {\n                    status = el.status\n                    text = el.text\n                }\n                return el\n            })\n            return { ...state, modal: { ...state.modal, update: { ...state.modal.update, visible: true, status: status, text: text, id: id } } }\n        }\n\n        case 'CLOSE_UPDATE':\n            return { ...state, modal: { ...state.modal, update: { ...state.modal.update, visible: false, status: '', text: '', id: '' } } }\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}