{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/pages/add.js\";\nimport React from 'react';\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, saveFilm } from '../store/action'; //component\n\nimport WorkersBreadcrumb from '../components/breadcrumb';\nimport EditableTagGroup from '../components/tagGroup';\nconst Option = Select.Option;\nlet breadcrumbs = [{\n  path: '/',\n  breadcrumbName: 'Films'\n}, {\n  path: '/add/',\n  breadcrumbName: 'Add'\n}];\n\nclass FilmAdd extends React.Component {\n  constructor(props) {\n    super(props);\n    this.saveFilm = this.saveFilm.bind(this);\n  }\n\n  componentDidMount() {}\n\n  saveFilm() {\n    this.props.saveFilm(this.props.data, this.props.history);\n  }\n\n  render() {\n    let _this$props = this.props,\n        load = _this$props.load,\n        data = _this$props.data;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(WorkersBreadcrumb, {\n      breadcrumbs: breadcrumbs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }), load ? React.createElement(LoadCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }) : React.createElement(RenderCard, {\n      data: data,\n      filmChangeName: this.props.filmChangeName,\n      filmChangeDate: this.props.filmChangeDate,\n      filmChangeFormat: this.props.filmChangeFormat,\n      filmChangeTag: this.props.filmChangeTag,\n      saveFilm: this.saveFilm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  load: state.film.load,\n  data: state.film.data\n});\n\nconst mapDispatchToProps = dispatch => ({\n  filmChangeName: bindActionCreators(filmChangeName, dispatch),\n  filmChangeDate: bindActionCreators(filmChangeDate, dispatch),\n  filmChangeFormat: bindActionCreators(filmChangeFormat, dispatch),\n  filmChangeTag: bindActionCreators(filmChangeTag, dispatch),\n  saveFilm: bindActionCreators(saveFilm, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmAdd);\n\nconst LoadCard = () => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  loading: true,\n  actions: [React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n});\n\nconst RenderCard = ({\n  data,\n  filmChangeName,\n  filmChangeDate,\n  filmChangeFormat,\n  filmChangeTag,\n  saveFilm\n}) => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  actions: [React.createElement(Popconfirm, {\n    key: \"save\",\n    title: \"Are you sure Save this Film?\",\n    onConfirm: saveFilm,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 93\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 107\n  },\n  __self: this\n}, \"Name:\"), React.createElement(Input, {\n  value: data.name,\n  onChange: filmChangeName,\n  placeholder: \"Name...\",\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 108\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109\n  },\n  __self: this\n}, \"Release:\"), React.createElement(DatePicker, {\n  value: data.release ? moment(data.release) : null,\n  onChange: filmChangeDate,\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 110\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111\n  },\n  __self: this\n}, \"Format:\"), React.createElement(Select, {\n  value: data.format,\n  onChange: filmChangeFormat,\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112\n  },\n  __self: this\n}, ['VHS', 'DVD', 'Blu-Ray'].map(el => React.createElement(Option, {\n  value: el,\n  key: el,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 114\n  },\n  __self: this\n}, el))), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 117\n  },\n  __self: this\n}, \"Actors:\"), React.createElement(EditableTagGroup, {\n  actors: data.actors,\n  filmChangeTag: filmChangeTag,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118\n  },\n  __self: this\n}));","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/pages/add.js"],"names":["React","Card","Icon","Popconfirm","Input","Select","DatePicker","moment","connect","bindActionCreators","filmChangeName","filmChangeDate","filmChangeFormat","filmChangeTag","saveFilm","WorkersBreadcrumb","EditableTagGroup","Option","breadcrumbs","path","breadcrumbName","FilmAdd","Component","constructor","props","bind","componentDidMount","data","history","render","load","mapStateToProps","state","film","mapDispatchToProps","dispatch","LoadCard","width","margin","RenderCard","name","release","format","map","el","actors"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport { filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, saveFilm } from '../store/action'\n//component\nimport WorkersBreadcrumb from '../components/breadcrumb'\nimport EditableTagGroup from '../components/tagGroup'\n\nconst { Option } = Select\n\nlet breadcrumbs = [\n    {\n        path: '/',\n        breadcrumbName: 'Films',\n    },\n    {\n        path: '/add/',\n        breadcrumbName: 'Add',\n    }\n]\n\nclass FilmAdd extends React.Component {\n    constructor(props){\n        super(props)\n        this.saveFilm=this.saveFilm.bind(this)\n    }\n    componentDidMount() {\n\n    }\n    saveFilm(){\n        this.props.saveFilm(this.props.data, this.props.history)\n    }\n    render() {\n        let { load, data } = this.props\n        return (\n            <React.Fragment>\n                <WorkersBreadcrumb breadcrumbs={breadcrumbs} />\n                {\n                    load\n                        ?\n                        <LoadCard />\n                        :\n                        <RenderCard\n                            data={data}\n                            filmChangeName={this.props.filmChangeName}\n                            filmChangeDate={this.props.filmChangeDate}\n                            filmChangeFormat={this.props.filmChangeFormat}\n                            filmChangeTag={this.props.filmChangeTag}\n                            saveFilm={this.saveFilm}\n                        />\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    load: state.film.load,\n    data: state.film.data\n})\nconst mapDispatchToProps = dispatch => ({\n    filmChangeName: bindActionCreators(filmChangeName, dispatch),\n    filmChangeDate: bindActionCreators(filmChangeDate, dispatch),\n    filmChangeFormat: bindActionCreators(filmChangeFormat, dispatch),\n    filmChangeTag: bindActionCreators(filmChangeTag, dispatch),\n    saveFilm: bindActionCreators(saveFilm, dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilmAdd)\n\nconst LoadCard = () =>\n    <Card style={{ width: 300, margin: '20px auto' }} loading={true}\n        actions={[\n            <Popconfirm\n                disabled\n                key='save'\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                disabled\n                key='delete'\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}>\n    </Card>\n\nconst RenderCard = ({ data, filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, saveFilm }) =>\n    <Card\n        style={{ width: 300, margin: '20px auto' }}\n        actions={[\n            <Popconfirm\n                key='save'\n                title=\"Are you sure Save this Film?\"\n                onConfirm={saveFilm}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>\n        ]}\n    >\n        <span>Name:</span>\n        <Input value={data.name} onChange={filmChangeName} placeholder=\"Name...\" style={{ width: '100%' }} />\n        <span>Release:</span>\n        <DatePicker value={data.release ? moment(data.release) : null} onChange={filmChangeDate} style={{ width: '100%' }} />\n        <span>Format:</span>\n        <Select value={data.format} onChange={filmChangeFormat} style={{ width: '100%' }}>\n            {\n                ['VHS', 'DVD', 'Blu-Ray'].map(el => <Option value={el} key={el}>{el}</Option>)\n            }\n        </Select>\n        <span>Actors:</span>\n        <EditableTagGroup actors={data.actors} filmChangeTag={filmChangeTag} />\n    </Card>"]},"metadata":{},"sourceType":"module"}