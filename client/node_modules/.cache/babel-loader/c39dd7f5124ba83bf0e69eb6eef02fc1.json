{"ast":null,"code":"import { message, notification } from 'antd';\nexport const logout = () => ({\n  type: 'AUTH_LOGOUT'\n});\nexport const login = values => dispatch => {\n  let data = new FormData();\n  data.append('username', values.username);\n  data.append('password', values.password);\n  dispatch({\n    type: 'START_LOAD_AUTH'\n  });\n  fetch('https://uxcandy.com/~shapoval/test-task-backend/v2/login/?developer=vito', {\n    method: 'POST',\n    body: data\n  }).then(res => res.json()).then(data => {\n    setTimeout(() => {\n      if (data.status === 'ok') {\n        dispatch({\n          type: 'END_LOAD_AUTH',\n          payload: {\n            status: true,\n            token: data.message.token\n          }\n        });\n      } else {\n        dispatch({\n          type: 'END_LOAD_AUTH',\n          payload: {\n            status: false,\n            token: ''\n          }\n        });\n        message.error('Error LogIn!');\n      }\n    }, 500);\n  }).catch(err => {\n    console.log(err);\n    dispatch({\n      type: 'END_LOAD_AUTH',\n      payload: {\n        status: false,\n        token: ''\n      }\n    });\n    message.error('Error LogIn!');\n  });\n}; //tasks\n\nexport const fetchTasks = (page, sort_field, sort_direction) => dispatch => {\n  dispatch({\n    type: 'START_LOAD_TASKS',\n    payload: {\n      page: page,\n      sort_field: sort_field,\n      sort_direction: sort_direction\n    }\n  });\n  fetch(\"https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=vito&page=\".concat(page, \"&sort_field=\").concat(sort_field, \"&sort_direction=\").concat(sort_direction)).then(res => res.json()).then(data => {\n    setTimeout(() => {\n      if (data.status === 'ok') {\n        dispatch({\n          type: 'SUCCESS_LOAD_TASKS',\n          payload: {\n            arr: data.message.tasks,\n            count: Number(data.message.total_task_count)\n          }\n        });\n      } else {\n        message.error('Error Load Data!');\n        dispatch({\n          type: 'FAILED_LOAD_TASKS'\n        });\n      }\n    }, 500);\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Load Data!');\n    dispatch({\n      type: 'FAILED_LOAD_TASKS'\n    });\n  });\n};\nexport const addTasks = values => dispatch => {\n  let data = new FormData();\n  data.append('username', values.username);\n  data.append('email', values.email);\n  data.append('text', values.text);\n  fetch('https://uxcandy.com/~shapoval/test-task-backend/v2/create/?developer=vito', {\n    method: 'POST',\n    body: data\n  }).then(res => res.json()).then(data => {\n    if (data.status === 'ok') {\n      dispatch({\n        type: 'ADD_TASKS',\n        payload: data.message\n      });\n      message.success('Success Create Task!');\n    } else {\n      message.error('Error Create Task!');\n      dispatch({\n        type: 'FAILED_LOAD_TASKS'\n      });\n    }\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Create Task!');\n    dispatch({\n      type: 'FAILED_LOAD_TASKS'\n    });\n  });\n};\nexport const editTasks = (values, id, token) => dispatch => {\n  let data = new FormData();\n  values.status = values.status ? 10 : 0;\n  data.append('status', values.status);\n  data.append('text', values.text);\n  data.append('token', token);\n  fetch(\"https://uxcandy.com/~shapoval/test-task-backend/v2/edit/\".concat(id, \"/?developer=vito\"), {\n    method: 'POST',\n    body: data\n  }).then(res => res.json()).then(data => {\n    if (data.status === 'ok') {\n      dispatch({\n        type: 'EDIT_TASKS',\n        payload: {\n          data: values,\n          id: id\n        }\n      });\n      message.success('Success Update Task!');\n    } else {\n      if (data.message.hasOwnProperty('token')) {\n        notification['error']({\n          message: 'Error Update Task',\n          description: data.message.token\n        });\n        dispatch({\n          type: 'AUTH_LOGOUT'\n        });\n        dispatch({\n          type: 'FAILED_LOAD_TASKS'\n        });\n      } else {\n        message.error('Error Update Task!');\n        dispatch({\n          type: 'FAILED_LOAD_TASKS'\n        });\n      }\n    }\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Update Task!');\n    dispatch({\n      type: 'FAILED_LOAD_TASKS'\n    });\n  });\n}; //modal\n\nexport const openModal = () => ({\n  type: 'OPEN_MODAL'\n});\nexport const openUpdate = id => ({\n  type: 'OPEN_UPDATE',\n  payload: id\n});\nexport const closeModal = () => ({\n  type: 'CLOSE_MODAL'\n});\nexport const closeUpdate = () => ({\n  type: 'CLOSE_UPDATE'\n});","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/store/action.js"],"names":["message","notification","logout","type","login","values","dispatch","data","FormData","append","username","password","fetch","method","body","then","res","json","setTimeout","status","payload","token","error","catch","err","console","log","fetchTasks","page","sort_field","sort_direction","arr","tasks","count","Number","total_task_count","addTasks","email","text","success","editTasks","id","hasOwnProperty","description","openModal","openUpdate","closeModal","closeUpdate"],"mappings":"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","sourcesContent":["import { message, notification } from 'antd'\n\nexport const logout = () => ({ type: 'AUTH_LOGOUT' })\n\nexport const login = values => dispatch => {\n  let data = new FormData()\n  data.append('username', values.username)\n  data.append('password', values.password)\n\n  dispatch({ type: 'START_LOAD_AUTH' })\n  fetch('https://uxcandy.com/~shapoval/test-task-backend/v2/login/?developer=vito', {\n    method: 'POST',\n    body: data,\n  })\n    .then(res => res.json())\n    .then(data => {\n      setTimeout(() => {\n        if (data.status === 'ok') {\n          dispatch({\n            type: 'END_LOAD_AUTH',\n            payload: {\n              status: true,\n              token: data.message.token\n            }\n          })\n        } else {\n          dispatch({\n            type: 'END_LOAD_AUTH',\n            payload: {\n              status: false,\n              token: ''\n            }\n          })\n          message.error('Error LogIn!')\n        }\n      }, 500)\n    })\n    .catch(err => {\n      console.log(err)\n      dispatch({\n        type: 'END_LOAD_AUTH',\n        payload: {\n          status: false,\n          token: ''\n        }\n      })\n      message.error('Error LogIn!')\n    })\n}\n\n//tasks\nexport const fetchTasks = (page, sort_field, sort_direction) => dispatch => {\n  dispatch({\n    type: 'START_LOAD_TASKS', payload: {\n      page: page,\n      sort_field: sort_field,\n      sort_direction: sort_direction\n    }\n  })\n  fetch(`https://uxcandy.com/~shapoval/test-task-backend/v2/?developer=vito&page=${page}&sort_field=${sort_field}&sort_direction=${sort_direction}`)\n    .then(res => res.json())\n    .then(data => {\n      setTimeout(() => {\n        if (data.status === 'ok') {\n          dispatch({\n            type: 'SUCCESS_LOAD_TASKS',\n            payload: {\n              arr: data.message.tasks,\n              count: Number(data.message.total_task_count),\n            }\n          })\n        } else {\n          message.error('Error Load Data!')\n          dispatch({ type: 'FAILED_LOAD_TASKS' })\n        }\n      }\n        , 500)\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Load Data!')\n      dispatch({ type: 'FAILED_LOAD_TASKS' })\n    })\n}\n\nexport const addTasks = values => dispatch => {\n  let data = new FormData()\n  data.append('username', values.username)\n  data.append('email', values.email)\n  data.append('text', values.text)\n\n  fetch('https://uxcandy.com/~shapoval/test-task-backend/v2/create/?developer=vito', {\n    method: 'POST',\n    body: data,\n  })\n    .then(res => res.json())\n    .then(data => {\n      if (data.status === 'ok') {\n        dispatch({ type: 'ADD_TASKS', payload: data.message })\n        message.success('Success Create Task!')\n      } else {\n        message.error('Error Create Task!')\n        dispatch({ type: 'FAILED_LOAD_TASKS' })\n      }\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Create Task!')\n      dispatch({ type: 'FAILED_LOAD_TASKS' })\n    })\n}\n\nexport const editTasks = (values, id, token) => dispatch => {\n  let data = new FormData()\n  values.status = values.status ? 10 : 0\n  data.append('status', values.status)\n  data.append('text', values.text)\n  data.append('token', token)\n\n  fetch(`https://uxcandy.com/~shapoval/test-task-backend/v2/edit/${id}/?developer=vito`, {\n    method: 'POST',\n    body: data,\n  })\n    .then(res => res.json())\n    .then(data => {\n      if (data.status === 'ok') {\n        dispatch({\n          type: 'EDIT_TASKS', payload: {\n            data: values,\n            id: id\n          }\n        })\n        message.success('Success Update Task!')\n      } else {\n        if (data.message.hasOwnProperty('token')) {\n          notification['error']({\n            message: 'Error Update Task',\n            description: data.message.token,\n          })\n          dispatch({ type: 'AUTH_LOGOUT' })\n          dispatch({ type: 'FAILED_LOAD_TASKS' })\n        } else {\n          message.error('Error Update Task!')\n          dispatch({ type: 'FAILED_LOAD_TASKS' })\n        }\n      }\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Update Task!')\n      dispatch({ type: 'FAILED_LOAD_TASKS' })\n    })\n}\n//modal\nexport const openModal = () => ({ type: 'OPEN_MODAL' })\nexport const openUpdate = id => ({ type: 'OPEN_UPDATE', payload: id })\nexport const closeModal = () => ({ type: 'CLOSE_MODAL' })\nexport const closeUpdate = () => ({ type: 'CLOSE_UPDATE' })"]},"metadata":{},"sourceType":"module"}