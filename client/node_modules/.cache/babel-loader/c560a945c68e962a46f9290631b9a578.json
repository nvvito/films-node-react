{"ast":null,"code":"import _defineProperty from \"/home/vito/Desktop/films/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  films: {\n    list: [],\n    count: 0,\n    page: 1,\n    sort_field: 'name',\n    sort_direction: 'asc',\n    load: false\n  },\n  film: {\n    data: {\n      name: '',\n      release: '',\n      format: '',\n      actors: []\n    },\n    load: false\n  }\n};\nexport function reduser(state = initialState, action) {\n  switch (action.type) {\n    //tasks\n    case 'START_LOAD_FILMS':\n      return _objectSpread({}, state, {\n        films: _objectSpread({}, state.films, {\n          load: true,\n          page: action.payload.page,\n          sort_field: action.payload.sort_field,\n          sort_direction: action.payload.sort_direction\n        })\n      });\n\n    case 'FAILED_LOAD_FILMS':\n      return _objectSpread({}, state, {\n        films: _objectSpread({}, state.films, {\n          load: false\n        })\n      });\n\n    case 'SUCCESS_LOAD_FILMS':\n      return _objectSpread({}, state, {\n        films: _objectSpread({}, state.films, {\n          load: false,\n          list: action.payload.list,\n          count: action.payload.count\n        }) //task\n\n      });\n\n    case 'START_LOAD_FILM':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: true\n        })\n      });\n\n    case 'FAILED_LOAD_FILM':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false\n        })\n      });\n\n    case 'SUCCESS_LOAD_FILM':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false,\n          data: action.payload\n        })\n      });\n\n    case 'CHANGE_NAME':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            name: action.payload\n          })\n        })\n      });\n\n    case 'CHANGE_DATE':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            release: action.payload\n          })\n        })\n      });\n\n    case 'CHANGE_FORMAT':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            format: action.payload\n          })\n        })\n      });\n\n    case 'CHANGE_TAG':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            actors: action.payload\n          })\n        })\n      });\n\n    case 'FAILED_CREATE':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false,\n          error: false\n        })\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/store/reduser.js"],"names":["initialState","films","list","count","page","sort_field","sort_direction","load","film","data","name","release","format","actors","reduser","state","action","type","payload","error"],"mappings":"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","sourcesContent":["export const initialState = {\n    films: {\n        list: [],\n        count: 0,\n        page: 1,\n        sort_field: 'name',\n        sort_direction: 'asc',\n        load: false,\n    },\n    film: {\n        data: {\n            name: '',\n            release: '',\n            format: '',\n            actors: []\n        },\n        load: false,\n    }\n}\n\nexport function reduser(state = initialState, action) {\n    switch (action.type) {\n        //tasks\n        case 'START_LOAD_FILMS':\n            return { ...state, films: { ...state.films, load: true, page: action.payload.page, sort_field: action.payload.sort_field, sort_direction: action.payload.sort_direction } }\n        case 'FAILED_LOAD_FILMS':\n            return { ...state, films: { ...state.films, load: false } }\n        case 'SUCCESS_LOAD_FILMS':\n            return { ...state, films: { ...state.films, load: false, list: action.payload.list, count: action.payload.count } }\n        //task\n        case 'START_LOAD_FILM':\n            return { ...state, film: { ...state.film, load: true } }\n        case 'FAILED_LOAD_FILM':\n            return { ...state, film: { ...state.film, load: false } }\n        case 'SUCCESS_LOAD_FILM':\n            return { ...state, film: { ...state.film, load: false, data: action.payload } }\n        case 'CHANGE_NAME':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, name: action.payload } } }\n        case 'CHANGE_DATE':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, release: action.payload } } }\n        case 'CHANGE_FORMAT':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, format: action.payload } } }\n        case 'CHANGE_TAG':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, actors: action.payload } } }\n        case 'FAILED_CREATE':\n            return { ...state, film: { ...state.film, load: false, error: false } }\n\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}