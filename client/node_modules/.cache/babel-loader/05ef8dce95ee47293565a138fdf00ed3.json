{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/pages/film.js\";\nimport React from 'react';\nimport { Card, Icon, Popconfirm, Input, InputNumber, Select, Result } from 'antd';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\n/*import {\n    fetchWorker,\n    fetchDepartments,\n    WorkerChangeName,\n    WorkerChangeAge,\n    WorkerChangePhones,\n    WorkerChangeEmails,\n    WorkerChangeDepartment,\n    deleteWorker,\n    updateWorker\n} from '../store/action'*/\n//component\n\nimport WorkersBreadcrumb from '../components/breadcrumb';\nlet breadcrumb = [{\n  path: '/',\n  breadcrumbName: 'Home'\n}, {\n  path: '/workers/',\n  breadcrumbName: 'Workers'\n}];\n\nclass Task extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    let breadcrumbs = [...breadcrumb, {\n      breadcrumbName: worker.loadData ? '...' : worker.data.name ? worker.data.name : 'Noname'\n    }];\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(WorkersBreadcrumb, {\n      breadcrumbs: breadcrumbs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), worker.loadData ? React.createElement(LoadCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }) : React.createElement(RenderCard, {\n      worker: worker.data,\n      departments: departments.data,\n      changeName: this.props.WorkerChangeName,\n      changeAge: this.props.WorkerChangeAge,\n      changePhones: this.props.WorkerChangePhones,\n      changeEmails: this.props.WorkerChangeEmails,\n      changeDepartment: this.props.WorkerChangeDepartment,\n      deleteWorker: this.deleteWorker,\n      updateWorker: this.updateWorker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  load: state.film.load,\n  data: state.film.data\n});\n\nconst mapDispatchToProps = dispatch => ({// fetchFilm: bindActionCreators(fetchFilm, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);\n\nconst LoadCard = () => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  loading: true,\n  actions: [React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n});","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/pages/film.js"],"names":["React","Card","Icon","Popconfirm","Input","InputNumber","Select","Result","connect","bindActionCreators","WorkersBreadcrumb","breadcrumb","path","breadcrumbName","Task","Component","componentDidMount","render","breadcrumbs","worker","loadData","data","name","departments","props","WorkerChangeName","WorkerChangeAge","WorkerChangePhones","WorkerChangeEmails","WorkerChangeDepartment","deleteWorker","updateWorker","mapStateToProps","state","load","film","mapDispatchToProps","dispatch","LoadCard","width","margin"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Card, Icon, Popconfirm, Input, InputNumber, Select, Result } from 'antd'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\n/*import {\n    fetchWorker,\n    fetchDepartments,\n    WorkerChangeName,\n    WorkerChangeAge,\n    WorkerChangePhones,\n    WorkerChangeEmails,\n    WorkerChangeDepartment,\n    deleteWorker,\n    updateWorker\n} from '../store/action'*/\n//component\nimport WorkersBreadcrumb from '../components/breadcrumb'\n\nlet breadcrumb = [\n    {\n        path: '/',\n        breadcrumbName: 'Home',\n    },\n    {\n        path: '/workers/',\n        breadcrumbName: 'Workers',\n    }\n]\n\nclass Task extends React.Component {\n    componentDidMount() {\n\n    }\n    render() {\n        let breadcrumbs = [...breadcrumb, { breadcrumbName: worker.loadData ? '...' : worker.data.name ? worker.data.name : 'Noname' }]\n        return (\n            <React.Fragment>\n                <WorkersBreadcrumb breadcrumbs={breadcrumbs} />\n                {\n                    worker.loadData\n                        ?\n                        <LoadCard />\n                        :\n                        <RenderCard worker={worker.data} departments={departments.data}\n                            changeName={this.props.WorkerChangeName}\n                            changeAge={this.props.WorkerChangeAge}\n                            changePhones={this.props.WorkerChangePhones}\n                            changeEmails={this.props.WorkerChangeEmails}\n                            changeDepartment={this.props.WorkerChangeDepartment}\n                            deleteWorker={this.deleteWorker}\n                            updateWorker={this.updateWorker}\n                        />\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    load: state.film.load,\n    data: state.film.data\n})\nconst mapDispatchToProps = dispatch => ({\n   // fetchFilm: bindActionCreators(fetchFilm, dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)\n\nconst LoadCard = () =>\n    <Card style={{ width: 300, margin: '20px auto' }} loading={true}\n        actions={[\n            <Popconfirm\n                disabled\n                key='save'\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                disabled\n                key='delete'\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}>\n    </Card>"]},"metadata":{},"sourceType":"module"}