{"ast":null,"code":"import _defineProperty from \"/home/vito/films/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const initialState = {\n  films: {\n    list: [],\n    count: 0,\n    page: 1,\n    sort_field: 'name',\n    sort_direction: 'asc',\n    load: false\n  },\n  film: {\n    data: {\n      name: '',\n      release: '',\n      format: '',\n      actors: []\n    },\n    load: false\n  },\n  search: {\n    value: '',\n    result: []\n  },\n  import: {\n    load: false,\n    result: false\n  }\n};\nexport function reduser(state = initialState, action) {\n  switch (action.type) {\n    //films\n    case 'START_LOAD_FILMS':\n      return _objectSpread({}, state, {\n        films: _objectSpread({}, state.films, {\n          load: true,\n          page: action.payload.page,\n          sort_field: action.payload.sort_field,\n          sort_direction: action.payload.sort_direction\n        })\n      });\n\n    case 'FAILED_LOAD_FILMS':\n      return _objectSpread({}, state, {\n        films: _objectSpread({}, state.films, {\n          load: false\n        })\n      });\n\n    case 'SUCCESS_LOAD_FILMS':\n      return _objectSpread({}, state, {\n        films: _objectSpread({}, state.films, {\n          load: false,\n          list: action.payload.list,\n          count: action.payload.count\n        }) //film\n\n      });\n\n    case 'START_LOAD_FILM':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: true,\n          name: '',\n          release: '',\n          format: '',\n          actors: []\n        })\n      });\n\n    case 'FAILED_LOAD_FILM':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false\n        })\n      });\n\n    case 'SUCCESS_LOAD_FILM':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false,\n          data: action.payload\n        })\n      });\n\n    case 'CHANGE_NAME':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            name: action.payload\n          })\n        })\n      });\n\n    case 'CHANGE_DATE':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            release: action.payload\n          })\n        })\n      });\n\n    case 'CHANGE_FORMAT':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            format: action.payload\n          })\n        })\n      });\n\n    case 'CHANGE_TAG':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          data: _objectSpread({}, state.film.data, {\n            actors: action.payload\n          })\n        })\n      });\n\n    case 'FAILED_CREATE':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false\n        })\n      });\n\n    case 'FAILED_DELETE':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false\n        })\n      });\n\n    case 'FAILED_UPDATE':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false\n        }) //add\n\n      });\n\n    case 'OPEN_ADD_START':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: true,\n          data: {\n            name: '',\n            release: '',\n            format: '',\n            actors: []\n          }\n        })\n      });\n\n    case 'OPEN_ADD_END':\n      return _objectSpread({}, state, {\n        film: _objectSpread({}, state.film, {\n          load: false,\n          data: {\n            name: '',\n            release: '',\n            format: '',\n            actors: []\n          }\n        }) //search\n\n      });\n\n    case 'CHANGE_SEARCH_INPUT':\n      return _objectSpread({}, state, {\n        search: _objectSpread({}, state.search, {\n          value: action.payload\n        })\n      });\n\n    case 'OPEN_FILM':\n      return _objectSpread({}, state, {\n        search: _objectSpread({}, state.search, {\n          value: '',\n          result: []\n        })\n      });\n\n    case 'CHANGE_SEARCH_RESULT':\n      return _objectSpread({}, state, {\n        search: _objectSpread({}, state.search, {\n          result: action.payload\n        }) //import\n\n      });\n\n    case 'IMPORT_RESET':\n      return _objectSpread({}, state, {\n        import: {\n          load: false,\n          result: false\n        }\n      });\n\n    case 'IMPORT_FAILED':\n      return _objectSpread({}, state, {\n        import: {\n          load: false,\n          result: false\n        }\n      });\n\n    case 'IMPORT_SUCCESS':\n      return _objectSpread({}, state, {\n        import: {\n          load: false,\n          result: true\n        }\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/vito/films/client/src/store/reduser.js"],"names":["initialState","films","list","count","page","sort_field","sort_direction","load","film","data","name","release","format","actors","search","value","result","import","reduser","state","action","type","payload"],"mappings":"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","sourcesContent":["export const initialState = {\n    films: {\n        list: [],\n        count: 0,\n        page: 1,\n        sort_field: 'name',\n        sort_direction: 'asc',\n        load: false,\n    },\n    film: {\n        data: {\n            name: '',\n            release: '',\n            format: '',\n            actors: []\n        },\n        load: false,\n    },\n    search: {\n        value: '',\n        result: []\n    },\n    import: {\n        load: false,\n        result: false,\n    }\n}\n\nexport function reduser(state = initialState, action) {\n    switch (action.type) {\n        //films\n        case 'START_LOAD_FILMS':\n            return { ...state, films: { ...state.films, load: true, page: action.payload.page, sort_field: action.payload.sort_field, sort_direction: action.payload.sort_direction } }\n        case 'FAILED_LOAD_FILMS':\n            return { ...state, films: { ...state.films, load: false } }\n        case 'SUCCESS_LOAD_FILMS':\n            return { ...state, films: { ...state.films, load: false, list: action.payload.list, count: action.payload.count } }\n        //film\n        case 'START_LOAD_FILM':\n            return {\n                ...state, film: {\n                    ...state.film, load: true,\n                    name: '',\n                    release: '',\n                    format: '',\n                    actors: []\n                }\n            }\n        case 'FAILED_LOAD_FILM':\n            return { ...state, film: { ...state.film, load: false } }\n        case 'SUCCESS_LOAD_FILM':\n            return { ...state, film: { ...state.film, load: false, data: action.payload } }\n        case 'CHANGE_NAME':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, name: action.payload } } }\n        case 'CHANGE_DATE':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, release: action.payload } } }\n        case 'CHANGE_FORMAT':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, format: action.payload } } }\n        case 'CHANGE_TAG':\n            return { ...state, film: { ...state.film, data: { ...state.film.data, actors: action.payload } } }\n        case 'FAILED_CREATE':\n            return { ...state, film: { ...state.film, load: false } }\n        case 'FAILED_DELETE':\n            return { ...state, film: { ...state.film, load: false } }\n        case 'FAILED_UPDATE':\n            return { ...state, film: { ...state.film, load: false } }\n        //add\n        case 'OPEN_ADD_START':\n            return {\n                ...state, film: {\n                    ...state.film, load: true, data: {\n                        name: '',\n                        release: '',\n                        format: '',\n                        actors: []\n                    }\n                }\n            }\n        case 'OPEN_ADD_END':\n            return {\n                ...state, film: {\n                    ...state.film, load: false, data: {\n                        name: '',\n                        release: '',\n                        format: '',\n                        actors: []\n                    }\n                }\n            }\n        //search\n        case 'CHANGE_SEARCH_INPUT':\n            return { ...state, search: { ...state.search, value: action.payload } }\n        case 'OPEN_FILM':\n            return { ...state, search: { ...state.search, value: '', result: [] } }\n        case 'CHANGE_SEARCH_RESULT':\n            return { ...state, search: { ...state.search, result: action.payload } }\n        //import\n        case 'IMPORT_RESET':\n            return { ...state, import: { load: false, result: false, } }\n        case 'IMPORT_FAILED':\n            return { ...state, import: { load: false, result: false, } }\n        case 'IMPORT_SUCCESS':\n            return { ...state, import: { load: false, result: true, } }\n        default:\n            return state\n    }\n}"]},"metadata":{},"sourceType":"module"}