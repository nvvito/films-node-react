{"ast":null,"code":"var _jsxFileName = \"/home/vito/Desktop/films/client/src/pages/film.js\";\nimport React from 'react';\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, updateFilm, deleteFilm, fetchFilm } from '../store/action'; //component\n\nimport WorkersBreadcrumb from '../components/breadcrumb';\nimport EditableTagGroup from '../components/tagGroup';\nconst Option = Select.Option;\nlet breadcrumbs = [{\n  path: '/',\n  breadcrumbName: 'Films'\n}];\n\nclass Film extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateFilm = this.updateFilm.bind(this);\n    this.deleteFilm = this.deleteFilm.bind(this);\n  }\n\n  updateFilm() {\n    this.props.updateFilm(this.props.match.params.id, this.props.data);\n  }\n\n  deleteFilm() {\n    this.props.deleteFilm(this.props.match.params.id, this.props.history);\n  }\n\n  componentDidMount() {\n    this.props.fetchFilm(this.props.match.params.id);\n  }\n\n  componentDidUpdate(nextProps) {\n    if (nextProps.match.params.id !== this.props.match.params.id) {\n      this.props.fetchFilm(this.props.match.params.id);\n    }\n  }\n\n  render() {\n    let _this$props = this.props,\n        load = _this$props.load,\n        data = _this$props.data;\n    let breadcrumb = [...breadcrumbs, {\n      breadcrumbName: load ? '...' : data.name ? data.name : 'Noname'\n    }];\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(WorkersBreadcrumb, {\n      breadcrumbs: breadcrumb,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), load ? React.createElement(LoadCard, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }) : React.createElement(RenderCard, {\n      data: data,\n      filmChangeName: this.props.filmChangeName,\n      filmChangeDate: this.props.filmChangeDate,\n      filmChangeFormat: this.props.filmChangeFormat,\n      filmChangeTag: this.props.filmChangeTag,\n      updateFilm: this.updateFilm,\n      deleteFilm: this.deleteFilm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  load: state.film.load,\n  data: state.film.data\n});\n\nconst mapDispatchToProps = dispatch => ({\n  filmChangeName: bindActionCreators(filmChangeName, dispatch),\n  filmChangeDate: bindActionCreators(filmChangeDate, dispatch),\n  filmChangeFormat: bindActionCreators(filmChangeFormat, dispatch),\n  filmChangeTag: bindActionCreators(filmChangeTag, dispatch),\n  updateFilm: bindActionCreators(updateFilm, dispatch),\n  deleteFilm: bindActionCreators(deleteFilm, dispatch),\n  fetchFilm: bindActionCreators(fetchFilm, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Film);\n\nconst LoadCard = () => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  loading: true,\n  actions: [React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    disabled: true,\n    key: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 84\n  },\n  __self: this\n});\n\nconst RenderCard = ({\n  data,\n  filmChangeName,\n  filmChangeDate,\n  filmChangeFormat,\n  filmChangeTag,\n  updateFilm,\n  deleteFilm\n}) => React.createElement(Card, {\n  style: {\n    width: 300,\n    margin: '20px auto'\n  },\n  actions: [React.createElement(Popconfirm, {\n    key: \"save\",\n    title: \"Are you sure Save this Film?\",\n    onConfirm: updateFilm,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"save\",\n    key: \"save\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(Popconfirm, {\n    key: \"delete\",\n    title: \"Are you sure Delete this Film?\",\n    onConfirm: deleteFilm,\n    okText: \"Yes\",\n    cancelText: \"No\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Icon, {\n    type: \"delete\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }))],\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 125\n  },\n  __self: this\n}, \"Name:\"), React.createElement(Input, {\n  value: data.name,\n  onChange: filmChangeName,\n  placeholder: \"Name...\",\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 126\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 127\n  },\n  __self: this\n}, \"Release:\"), React.createElement(DatePicker, {\n  value: data.release ? moment(data.release) : null,\n  onChange: filmChangeDate,\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 128\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 129\n  },\n  __self: this\n}, \"Format:\"), React.createElement(Select, {\n  value: data.format,\n  onChange: filmChangeFormat,\n  style: {\n    width: '100%'\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 130\n  },\n  __self: this\n}, ['VHS', 'DVD', 'Blu-Ray'].map(el => React.createElement(Option, {\n  value: el,\n  key: el,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132\n  },\n  __self: this\n}, el))), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 135\n  },\n  __self: this\n}, \"Actors:\"), React.createElement(EditableTagGroup, {\n  actors: data.actors,\n  filmChangeTag: filmChangeTag,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 136\n  },\n  __self: this\n}));","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/pages/film.js"],"names":["React","Card","Icon","Popconfirm","Input","Select","DatePicker","moment","connect","bindActionCreators","filmChangeName","filmChangeDate","filmChangeFormat","filmChangeTag","updateFilm","deleteFilm","fetchFilm","WorkersBreadcrumb","EditableTagGroup","Option","breadcrumbs","path","breadcrumbName","Film","Component","constructor","props","bind","match","params","id","data","history","componentDidMount","componentDidUpdate","nextProps","render","load","breadcrumb","name","mapStateToProps","state","film","mapDispatchToProps","dispatch","LoadCard","width","margin","RenderCard","release","format","map","el","actors"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,UAArB,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgDC,UAAhD,QAAkE,MAAlE;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC,C,CACA;;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,gBAAzC,EAA2DC,aAA3D,EAA0EC,UAA1E,EAAsFC,UAAtF,EAAkGC,SAAlG,QAAmH,iBAAnH,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;MAEQC,M,GAAWd,M,CAAXc,M;AAER,IAAIC,WAAW,GAAG,CACd;AACIC,EAAAA,IAAI,EAAE,GADV;AAEIC,EAAAA,cAAc,EAAE;AAFpB,CADc,CAAlB;;AAOA,MAAMC,IAAN,SAAmBvB,KAAK,CAACwB,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKZ,UAAL,GAAkB,KAAKA,UAAL,CAAgBa,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKZ,UAAL,GAAkB,KAAKA,UAAL,CAAgBY,IAAhB,CAAqB,IAArB,CAAlB;AACH;;AACDb,EAAAA,UAAU,GAAG;AACT,SAAKY,KAAL,CAAWZ,UAAX,CAAsB,KAAKY,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EAAkD,KAAKJ,KAAL,CAAWK,IAA7D;AACH;;AACDhB,EAAAA,UAAU,GAAG;AACT,SAAKW,KAAL,CAAWX,UAAX,CAAsB,KAAKW,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA9C,EAAkD,KAAKJ,KAAL,CAAWM,OAA7D;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKP,KAAL,CAAWV,SAAX,CAAqB,KAAKU,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C;AACH;;AACDI,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC1B,QAAIA,SAAS,CAACP,KAAV,CAAgBC,MAAhB,CAAuBC,EAAvB,KAA8B,KAAKJ,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA1D,EAA8D;AAC1D,WAAKJ,KAAL,CAAWV,SAAX,CAAqB,KAAKU,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C;AACH;AACJ;;AACDM,EAAAA,MAAM,GAAG;AAAA,sBACgB,KAAKV,KADrB;AAAA,QACCW,IADD,eACCA,IADD;AAAA,QACON,IADP,eACOA,IADP;AAEL,QAAIO,UAAU,GAAG,CAAC,GAAGlB,WAAJ,EAAiB;AAAEE,MAAAA,cAAc,EAAEe,IAAI,GAAG,KAAH,GAAWN,IAAI,CAACQ,IAAL,GAAYR,IAAI,CAACQ,IAAjB,GAAwB;AAAzD,KAAjB,CAAjB;AACA,WACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,iBAAD;AAAmB,MAAA,WAAW,EAAED,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAGQD,IAAI,GAEA,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,GAIA,oBAAC,UAAD;AACI,MAAA,IAAI,EAAEN,IADV;AAEI,MAAA,cAAc,EAAE,KAAKL,KAAL,CAAWhB,cAF/B;AAGI,MAAA,cAAc,EAAE,KAAKgB,KAAL,CAAWf,cAH/B;AAII,MAAA,gBAAgB,EAAE,KAAKe,KAAL,CAAWd,gBAJjC;AAKI,MAAA,aAAa,EAAE,KAAKc,KAAL,CAAWb,aAL9B;AAMI,MAAA,UAAU,EAAE,KAAKC,UANrB;AAOI,MAAA,UAAU,EAAE,KAAKC,UAPrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPZ,CADJ;AAoBH;;AA3C8B;;AA8CnC,MAAMyB,eAAe,GAAGC,KAAK,KAAK;AAC9BJ,EAAAA,IAAI,EAAEI,KAAK,CAACC,IAAN,CAAWL,IADa;AAE9BN,EAAAA,IAAI,EAAEU,KAAK,CAACC,IAAN,CAAWX;AAFa,CAAL,CAA7B;;AAIA,MAAMY,kBAAkB,GAAGC,QAAQ,KAAK;AACpClC,EAAAA,cAAc,EAAED,kBAAkB,CAACC,cAAD,EAAiBkC,QAAjB,CADE;AAEpCjC,EAAAA,cAAc,EAAEF,kBAAkB,CAACE,cAAD,EAAiBiC,QAAjB,CAFE;AAGpChC,EAAAA,gBAAgB,EAAEH,kBAAkB,CAACG,gBAAD,EAAmBgC,QAAnB,CAHA;AAIpC/B,EAAAA,aAAa,EAAEJ,kBAAkB,CAACI,aAAD,EAAgB+B,QAAhB,CAJG;AAKpC9B,EAAAA,UAAU,EAAEL,kBAAkB,CAACK,UAAD,EAAa8B,QAAb,CALM;AAMpC7B,EAAAA,UAAU,EAAEN,kBAAkB,CAACM,UAAD,EAAa6B,QAAb,CANM;AAOpC5B,EAAAA,SAAS,EAAEP,kBAAkB,CAACO,SAAD,EAAY4B,QAAZ;AAPO,CAAL,CAAnC;;AAUA,eAAepC,OAAO,CAACgC,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CpB,IAA7C,CAAf;;AAEA,MAAMsB,QAAQ,GAAG,MACb,oBAAC,IAAD;AAAM,EAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GAAb;AAAkD,EAAA,OAAO,EAAE,IAA3D;AACI,EAAA,OAAO,EAAE,CACL,oBAAC,UAAD;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,GAAG,EAAC,MAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,GAAG,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADK,EAOL,oBAAC,UAAD;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,GAAG,EAAC,QAFR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAII,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CAPK,CADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ;;AAkBA,MAAMC,UAAU,GAAG,CAAC;AAAEjB,EAAAA,IAAF;AAAQrB,EAAAA,cAAR;AAAwBC,EAAAA,cAAxB;AAAwCC,EAAAA,gBAAxC;AAA0DC,EAAAA,aAA1D;AAAyEC,EAAAA,UAAzE;AAAqFC,EAAAA;AAArF,CAAD,KACf,oBAAC,IAAD;AACI,EAAA,KAAK,EAAE;AAAE+B,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GADX;AAEI,EAAA,OAAO,EAAE,CACL,oBAAC,UAAD;AACI,IAAA,GAAG,EAAC,MADR;AAEI,IAAA,KAAK,EAAC,8BAFV;AAGI,IAAA,SAAS,EAAEjC,UAHf;AAII,IAAA,MAAM,EAAC,KAJX;AAKI,IAAA,UAAU,EAAC,IALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,MAAX;AAAkB,IAAA,GAAG,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADK,EAUL,oBAAC,UAAD;AACI,IAAA,GAAG,EAAC,QADR;AAEI,IAAA,KAAK,EAAC,gCAFV;AAGI,IAAA,SAAS,EAAEC,UAHf;AAII,IAAA,MAAM,EAAC,KAJX;AAKI,IAAA,UAAU,EAAC,IALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CAVK,CAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAvBJ,EAwBI,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAEgB,IAAI,CAACQ,IAAnB;AAAyB,EAAA,QAAQ,EAAE7B,cAAnC;AAAmD,EAAA,WAAW,EAAC,SAA/D;AAAyE,EAAA,KAAK,EAAE;AAAEoC,IAAAA,KAAK,EAAE;AAAT,GAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAxBJ,EAyBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBJ,EA0BI,oBAAC,UAAD;AAAY,EAAA,KAAK,EAAEf,IAAI,CAACkB,OAAL,GAAe1C,MAAM,CAACwB,IAAI,CAACkB,OAAN,CAArB,GAAsC,IAAzD;AAA+D,EAAA,QAAQ,EAAEtC,cAAzE;AAAyF,EAAA,KAAK,EAAE;AAAEmC,IAAAA,KAAK,EAAE;AAAT,GAAhG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA1BJ,EA2BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA3BJ,EA4BI,oBAAC,MAAD;AAAQ,EAAA,KAAK,EAAEf,IAAI,CAACmB,MAApB;AAA4B,EAAA,QAAQ,EAAEtC,gBAAtC;AAAwD,EAAA,KAAK,EAAE;AAAEkC,IAAAA,KAAK,EAAE;AAAT,GAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAEQ,CAAC,KAAD,EAAQ,KAAR,EAAe,SAAf,EAA0BK,GAA1B,CAA8BC,EAAE,IAAI,oBAAC,MAAD;AAAQ,EAAA,KAAK,EAAEA,EAAf;AAAmB,EAAA,GAAG,EAAEA,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA6BA,EAA7B,CAApC,CAFR,CA5BJ,EAiCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAjCJ,EAkCI,oBAAC,gBAAD;AAAkB,EAAA,MAAM,EAAErB,IAAI,CAACsB,MAA/B;AAAuC,EAAA,aAAa,EAAExC,aAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAlCJ,CADJ","sourcesContent":["import React from 'react'\nimport { Card, Icon, Popconfirm, Input, Select, DatePicker } from 'antd'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport { filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, updateFilm, deleteFilm, fetchFilm } from '../store/action'\n//component\nimport WorkersBreadcrumb from '../components/breadcrumb'\nimport EditableTagGroup from '../components/tagGroup'\n\nconst { Option } = Select\n\nlet breadcrumbs = [\n    {\n        path: '/',\n        breadcrumbName: 'Films',\n    }\n]\n\nclass Film extends React.Component {\n    constructor(props) {\n        super(props)\n        this.updateFilm = this.updateFilm.bind(this)\n        this.deleteFilm = this.deleteFilm.bind(this)\n    }\n    updateFilm() {\n        this.props.updateFilm(this.props.match.params.id, this.props.data)\n    }\n    deleteFilm() {\n        this.props.deleteFilm(this.props.match.params.id, this.props.history)\n    }\n    componentDidMount() {\n        this.props.fetchFilm(this.props.match.params.id)\n    }\n    componentDidUpdate(nextProps) {\n        if (nextProps.match.params.id !== this.props.match.params.id) {\n            this.props.fetchFilm(this.props.match.params.id)\n        }\n    }\n    render() {\n        let { load, data } = this.props\n        let breadcrumb = [...breadcrumbs, { breadcrumbName: load ? '...' : data.name ? data.name : 'Noname' }]\n        return (\n            <React.Fragment>\n                <WorkersBreadcrumb breadcrumbs={breadcrumb} />\n                {\n                    load\n                        ?\n                        <LoadCard />\n                        :\n                        <RenderCard\n                            data={data}\n                            filmChangeName={this.props.filmChangeName}\n                            filmChangeDate={this.props.filmChangeDate}\n                            filmChangeFormat={this.props.filmChangeFormat}\n                            filmChangeTag={this.props.filmChangeTag}\n                            updateFilm={this.updateFilm}\n                            deleteFilm={this.deleteFilm}\n                        />\n                }\n            </React.Fragment>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    load: state.film.load,\n    data: state.film.data\n})\nconst mapDispatchToProps = dispatch => ({\n    filmChangeName: bindActionCreators(filmChangeName, dispatch),\n    filmChangeDate: bindActionCreators(filmChangeDate, dispatch),\n    filmChangeFormat: bindActionCreators(filmChangeFormat, dispatch),\n    filmChangeTag: bindActionCreators(filmChangeTag, dispatch),\n    updateFilm: bindActionCreators(updateFilm, dispatch),\n    deleteFilm: bindActionCreators(deleteFilm, dispatch),\n    fetchFilm: bindActionCreators(fetchFilm, dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Film)\n\nconst LoadCard = () =>\n    <Card style={{ width: 300, margin: '20px auto' }} loading={true}\n        actions={[\n            <Popconfirm\n                disabled\n                key='save'\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                disabled\n                key='delete'\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}>\n    </Card>\n\nconst RenderCard = ({ data, filmChangeName, filmChangeDate, filmChangeFormat, filmChangeTag, updateFilm, deleteFilm }) =>\n    <Card\n        style={{ width: 300, margin: '20px auto' }}\n        actions={[\n            <Popconfirm\n                key='save'\n                title=\"Are you sure Save this Film?\"\n                onConfirm={updateFilm}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"save\" key='save' />\n            </Popconfirm>,\n            <Popconfirm\n                key='delete'\n                title=\"Are you sure Delete this Film?\"\n                onConfirm={deleteFilm}\n                okText=\"Yes\"\n                cancelText=\"No\"\n            >\n                <Icon type=\"delete\" />\n            </Popconfirm>\n        ]}\n    >\n        <span>Name:</span>\n        <Input value={data.name} onChange={filmChangeName} placeholder=\"Name...\" style={{ width: '100%' }} />\n        <span>Release:</span>\n        <DatePicker value={data.release ? moment(data.release) : null} onChange={filmChangeDate} style={{ width: '100%' }} />\n        <span>Format:</span>\n        <Select value={data.format} onChange={filmChangeFormat} style={{ width: '100%' }}>\n            {\n                ['VHS', 'DVD', 'Blu-Ray'].map(el => <Option value={el} key={el}>{el}</Option>)\n            }\n        </Select>\n        <span>Actors:</span>\n        <EditableTagGroup actors={data.actors} filmChangeTag={filmChangeTag} />\n    </Card>"]},"metadata":{},"sourceType":"module"}