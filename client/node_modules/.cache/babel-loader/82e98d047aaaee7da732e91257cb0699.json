{"ast":null,"code":"import { message } from 'antd'; //tasks\n\nexport const fetchFilms = (page, sort_field, sort_direction) => dispatch => {\n  dispatch({\n    type: 'START_LOAD_FILMS',\n    payload: {\n      page: page,\n      sort_field: sort_field,\n      sort_direction: sort_direction\n    }\n  });\n  fetch(\"/api/film/?page=\".concat(page, \"&sort_field=\").concat(sort_field, \"&sort_direction=\").concat(sort_direction)).then(res => res.json()).then(data => {\n    setTimeout(() => {\n      if (data.status) {\n        dispatch({\n          type: 'SUCCESS_LOAD_FILMS',\n          payload: {\n            list: data.message.result,\n            count: Number(data.message.count)\n          }\n        });\n      } else {\n        message.error('Error Load Data!');\n        dispatch({\n          type: 'FAILED_LOAD_FILMS'\n        });\n      }\n    }, 500);\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Load Data!');\n    dispatch({\n      type: 'FAILED_LOAD_FILMS'\n    });\n  });\n};\nexport const fetchFilm = id => dispatch => {\n  dispatch({\n    type: 'START_LOAD_FILM'\n  });\n  fetch(\"/api/film/\".concat(id)).then(res => res.json()).then(data => {\n    setTimeout(() => {\n      if (data.status) {\n        dispatch({\n          type: 'SUCCESS_LOAD_FILM',\n          payload: data.message\n        });\n      } else {\n        message.error('Error Load Data!');\n        dispatch({\n          type: 'FAILED_LOAD_FILM'\n        });\n      }\n    }, 500);\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Load Data!');\n    dispatch({\n      type: 'FAILED_LOAD_FILM'\n    });\n  });\n};\nexport const addTasks = values => dispatch => {\n  let data = new FormData();\n  data.append('username', values.username);\n  data.append('email', values.email);\n  data.append('text', values.text);\n  fetch('https://uxcandy.com/~shapoval/test-task-backend/v2/create/?developer=vito', {\n    method: 'POST',\n    body: data\n  }).then(res => res.json()).then(data => {\n    if (data.status === 'ok') {\n      dispatch({\n        type: 'ADD_TASKS',\n        payload: data.message\n      });\n      message.success('Success Create Task!');\n    } else {\n      message.error('Error Create Task!');\n      dispatch({\n        type: 'FAILED_LOAD_TASKS'\n      });\n    }\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Create Task!');\n    dispatch({\n      type: 'FAILED_LOAD_TASKS'\n    });\n  });\n};\nexport const editTasks = (values, id, token) => dispatch => {\n  let data = new FormData();\n  values.status = values.status ? 10 : 0;\n  data.append('status', values.status);\n  data.append('text', values.text);\n  data.append('token', token);\n  fetch(\"https://uxcandy.com/~shapoval/test-task-backend/v2/edit/\".concat(id, \"/?developer=vito\"), {\n    method: 'POST',\n    body: data\n  }).then(res => res.json()).then(data => {\n    if (data.status === 'ok') {\n      dispatch({\n        type: 'EDIT_TASKS',\n        payload: {\n          data: values,\n          id: id\n        }\n      });\n      message.success('Success Update Task!');\n    } else {\n      if (data.message.hasOwnProperty('token')) {\n        /*notification['error']({\n          message: 'Error Update Task',\n          description: data.message.token,\n        })*/\n        dispatch({\n          type: 'AUTH_LOGOUT'\n        });\n        dispatch({\n          type: 'FAILED_LOAD_TASKS'\n        });\n      } else {\n        message.error('Error Update Task!');\n        dispatch({\n          type: 'FAILED_LOAD_TASKS'\n        });\n      }\n    }\n  }).catch(err => {\n    console.log(err);\n    message.error('Error Update Task!');\n    dispatch({\n      type: 'FAILED_LOAD_TASKS'\n    });\n  });\n}; //modal\n\nexport const openModal = () => ({\n  type: 'OPEN_MODAL'\n});\nexport const openUpdate = id => ({\n  type: 'OPEN_UPDATE',\n  payload: id\n});\nexport const closeModal = () => ({\n  type: 'CLOSE_MODAL'\n});\nexport const closeUpdate = () => ({\n  type: 'CLOSE_UPDATE'\n});","map":{"version":3,"sources":["/home/vito/Desktop/films/client/src/store/action.js"],"names":["message","fetchFilms","page","sort_field","sort_direction","dispatch","type","payload","fetch","then","res","json","data","setTimeout","status","list","result","count","Number","error","catch","err","console","log","fetchFilm","id","addTasks","values","FormData","append","username","email","text","method","body","success","editTasks","token","hasOwnProperty","openModal","openUpdate","closeModal","closeUpdate"],"mappings":"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","sourcesContent":["import { message } from 'antd'\n\n//tasks\nexport const fetchFilms = (page, sort_field, sort_direction) => dispatch => {\n  dispatch({\n    type: 'START_LOAD_FILMS', payload: {\n      page: page,\n      sort_field: sort_field,\n      sort_direction: sort_direction\n    }\n  })\n  fetch(`/api/film/?page=${page}&sort_field=${sort_field}&sort_direction=${sort_direction}`)\n    .then(res => res.json())\n    .then(data => {\n      setTimeout(() => {\n        if (data.status) {\n          dispatch({\n            type: 'SUCCESS_LOAD_FILMS',\n            payload: {\n              list: data.message.result,\n              count: Number(data.message.count),\n            }\n          })\n        } else {\n          message.error('Error Load Data!')\n          dispatch({ type: 'FAILED_LOAD_FILMS' })\n        }\n      }, 500)\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Load Data!')\n      dispatch({ type: 'FAILED_LOAD_FILMS' })\n    })\n}\n\nexport const fetchFilm = id => dispatch => {\n  dispatch({ type: 'START_LOAD_FILM' })\n  fetch(`/api/film/${id}`)\n    .then(res => res.json())\n    .then(data => {\n      setTimeout(() => {\n        if (data.status) {\n          dispatch({\n            type: 'SUCCESS_LOAD_FILM',\n            payload: data.message\n          })\n        } else {\n          message.error('Error Load Data!')\n          dispatch({ type: 'FAILED_LOAD_FILM' })\n        }\n      }, 500)\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Load Data!')\n      dispatch({ type: 'FAILED_LOAD_FILM' })\n    })\n}\n\nexport const addTasks = values => dispatch => {\n  let data = new FormData()\n  data.append('username', values.username)\n  data.append('email', values.email)\n  data.append('text', values.text)\n\n  fetch('https://uxcandy.com/~shapoval/test-task-backend/v2/create/?developer=vito', {\n    method: 'POST',\n    body: data,\n  })\n    .then(res => res.json())\n    .then(data => {\n      if (data.status === 'ok') {\n        dispatch({ type: 'ADD_TASKS', payload: data.message })\n        message.success('Success Create Task!')\n      } else {\n        message.error('Error Create Task!')\n        dispatch({ type: 'FAILED_LOAD_TASKS' })\n      }\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Create Task!')\n      dispatch({ type: 'FAILED_LOAD_TASKS' })\n    })\n}\n\nexport const editTasks = (values, id, token) => dispatch => {\n  let data = new FormData()\n  values.status = values.status ? 10 : 0\n  data.append('status', values.status)\n  data.append('text', values.text)\n  data.append('token', token)\n\n  fetch(`https://uxcandy.com/~shapoval/test-task-backend/v2/edit/${id}/?developer=vito`, {\n    method: 'POST',\n    body: data,\n  })\n    .then(res => res.json())\n    .then(data => {\n      if (data.status === 'ok') {\n        dispatch({\n          type: 'EDIT_TASKS', payload: {\n            data: values,\n            id: id\n          }\n        })\n        message.success('Success Update Task!')\n      } else {\n        if (data.message.hasOwnProperty('token')) {\n          /*notification['error']({\n            message: 'Error Update Task',\n            description: data.message.token,\n          })*/\n          dispatch({ type: 'AUTH_LOGOUT' })\n          dispatch({ type: 'FAILED_LOAD_TASKS' })\n        } else {\n          message.error('Error Update Task!')\n          dispatch({ type: 'FAILED_LOAD_TASKS' })\n        }\n      }\n    })\n    .catch(err => {\n      console.log(err)\n      message.error('Error Update Task!')\n      dispatch({ type: 'FAILED_LOAD_TASKS' })\n    })\n}\n//modal\nexport const openModal = () => ({ type: 'OPEN_MODAL' })\nexport const openUpdate = id => ({ type: 'OPEN_UPDATE', payload: id })\nexport const closeModal = () => ({ type: 'CLOSE_MODAL' })\nexport const closeUpdate = () => ({ type: 'CLOSE_UPDATE' })"]},"metadata":{},"sourceType":"module"}