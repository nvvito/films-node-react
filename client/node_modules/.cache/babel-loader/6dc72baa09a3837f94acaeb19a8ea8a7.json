{"ast":null,"code":"var _jsxFileName = \"/home/vito/films/client/src/pages/import.js\";\nimport React from 'react';\nimport { Button, Result, Spin, Icon } from 'antd';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; //action\n\nimport { importData, importReset } from '../store/action'; //component\n\nimport FilmBreadcrumb from '../components/breadcrumb';\nlet breadcrumbs = [{\n  path: '/',\n  breadcrumbName: 'Films'\n}, {\n  path: '/import/',\n  breadcrumbName: 'Import'\n}];\n\nclass FileInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fileInput = React.createRef();\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let reader = new FileReader();\n    reader.readAsText(this.fileInput.current.files[0]);\n\n    reader.onload = e => {\n      let result = e.target.result;\n      result = result.split('\\n').filter(el => el !== '');\n      let data = [];\n\n      for (let i = 0; i < result.length; i += 4) {\n        let name = result[i].slice(7);\n        let release = moment(result[i + 1].slice(14)).valueOf();\n        let format = result[i + 2].slice(8);\n        let actors = result[i + 3].slice(7).split(',').map(el => el.trim()).map(el => {\n          let elements = el.split(' ');\n          return {\n            f_name: elements[0],\n            l_name: elements[1]\n          };\n        });\n        data.push({\n          name,\n          release,\n          format,\n          actors\n        });\n      }\n\n      this.props.importData(data);\n    };\n  }\n\n  render() {\n    return this.props.result ? React.createElement(Result, {\n      status: \"success\",\n      title: \"Import Data Success!\",\n      subTitle: \"You can import the data again!\",\n      extra: React.createElement(Button, {\n        type: \"primary\",\n        onClick: this.props.importReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Import Again\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(FilmBreadcrumb, {\n      breadcrumbs: breadcrumbs,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"import-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.props.load ? React.createElement(Spin, {\n      indicator: React.createElement(Icon, {\n        type: \"loading\",\n        style: {\n          fontSize: 24\n        },\n        spin: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }) : React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Select File PLS!\", React.createElement(\"input\", {\n      type: \"file\",\n      ref: this.fileInput,\n      name: \"file\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(Button, {\n      onClick: this.handleSubmit,\n      disabled: this.props.load,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Import\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  load: state.import.load,\n  result: state.import.result\n});\n\nconst mapDispatchToProps = dispatch => ({\n  importData: bindActionCreators(importData, dispatch),\n  importReset: bindActionCreators(importReset, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileInput);","map":{"version":3,"sources":["/home/vito/films/client/src/pages/import.js"],"names":["React","Button","Result","Spin","Icon","moment","connect","bindActionCreators","importData","importReset","FilmBreadcrumb","breadcrumbs","path","breadcrumbName","FileInput","Component","constructor","props","handleSubmit","bind","fileInput","createRef","event","preventDefault","reader","FileReader","readAsText","current","files","onload","e","result","target","split","filter","el","data","i","length","name","slice","release","valueOf","format","actors","map","trim","elements","f_name","l_name","push","render","load","fontSize","mapStateToProps","state","import","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Button, Result, Spin, Icon } from 'antd'\nimport moment from 'moment'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n//action\nimport { importData, importReset } from '../store/action'\n//component\nimport FilmBreadcrumb from '../components/breadcrumb'\n\nlet breadcrumbs = [\n    {\n        path: '/',\n        breadcrumbName: 'Films',\n    },\n    {\n        path: '/import/',\n        breadcrumbName: 'Import',\n    }\n]\n\nclass FileInput extends React.Component {\n    constructor(props) {\n        super(props)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.fileInput = React.createRef()\n    }\n    handleSubmit(event) {\n        event.preventDefault()\n        let reader = new FileReader()\n        reader.readAsText(this.fileInput.current.files[0])\n        reader.onload = (e) => {\n            let result = e.target.result\n            result = result.split('\\n').filter(el => el !== '')\n            let data = []\n            for (let i = 0; i < result.length; i += 4) {\n                let name = result[i].slice(7)\n                let release = moment(result[i + 1].slice(14)).valueOf()\n                let format = result[i + 2].slice(8)\n                let actors = result[i + 3].slice(7).split(',').map(el => el.trim()).map(el => {\n                    let elements = el.split(' ')\n                    return {\n                        f_name: elements[0],\n                        l_name: elements[1]\n                    }\n                })\n\n                data.push({ name, release, format, actors })\n            }\n            this.props.importData(data)\n        }\n    }\n    render() {\n        return (\n\n            this.props.result\n                ?\n                <Result\n                    status=\"success\"\n                    title=\"Import Data Success!\"\n                    subTitle=\"You can import the data again!\"\n                    extra={<Button type=\"primary\" onClick={this.props.importReset}>Import Again</Button>}\n                />\n                :\n                <React.Fragment>\n                    <FilmBreadcrumb breadcrumbs={breadcrumbs} />\n                    <div className='import-form'>\n                        {\n                            this.props.load\n                                ?\n                                <Spin indicator={<Icon type=\"loading\" style={{ fontSize: 24 }} spin />} />\n                                :\n                                <label>\n                                    Select File PLS!\n                                <input type=\"file\" ref={this.fileInput} name=\"file\" />\n                                </label>\n\n                        }\n                        <Button onClick={this.handleSubmit} disabled={this.props.load}>Import</Button>\n                    </div>\n                </React.Fragment>\n        )\n    }\n}\nconst mapStateToProps = state => ({\n    load: state.import.load,\n    result: state.import.result\n})\nconst mapDispatchToProps = dispatch => ({\n    importData: bindActionCreators(importData, dispatch),\n    importReset: bindActionCreators(importReset, dispatch),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FileInput)"]},"metadata":{},"sourceType":"module"}